{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57],"program":"C:\\Users\\Alan Ma\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","itertools","C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=2aa79ff10893fbf7","-C","extra-filename=-2aa79ff10893fbf7","--out-dir","d:\\Rust\\particle\\target\\rls\\debug\\deps","-L","dependency=d:\\Rust\\particle\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Alan Ma\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":[100,58,92,82,117,115,116,92,112,97,114,116,105,99,108,101,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,105,116,101,114,116,111,111,108,115,45,50,97,97,55,57,102,102,49,48,56,57,51,102,98,102,55,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"itertools","disambiguator":[7204845060624414008,6913562400496935140]},"crate_root":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src","external_crates":[{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2461050901580663130,13171115275296352452]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[8022629710910843829,13503404060310592223]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4339226960987119947,4220440642383456252]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[3893481107274575583,4860510609933999118]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[2100258045533171003,5822622357944671454]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[3400909174518281693,3018597966691292604]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14261940699245744681,16322901234827333825]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","num":8,"id":{"name":"panic_unwind","disambiguator":[3743022926293122458,13465831240801851205]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":54397,"line_start":1,"line_end":1685,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1284,"byte_end":1289,"line_start":45,"line_end":45,"column_start":5,"column_end":10},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1442},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1295,"byte_end":1305,"line_start":46,"line_end":46,"column_start":5,"column_end":15},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1448},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1311,"byte_end":1329,"line_start":47,"line_end":47,"column_start":5,"column_end":23},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1460},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1335,"byte_end":1342,"line_start":48,"line_end":48,"column_start":5,"column_end":12},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1454},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1348,"byte_end":1355,"line_start":49,"line_end":49,"column_start":5,"column_end":12},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":208},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1361,"byte_end":1369,"line_start":50,"line_end":50,"column_start":5,"column_end":13},"alias_span":null,"name":"PutBackN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1466},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1375,"byte_end":1383,"line_start":51,"line_end":51,"column_start":5,"column_end":13},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1472},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1389,"byte_end":1396,"line_start":52,"line_end":52,"column_start":5,"column_end":12},"alias_span":null,"name":"GroupBy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1478},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1402,"byte_end":1406,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":290},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1412,"byte_end":1417,"line_start":54,"line_end":54,"column_start":5,"column_end":10},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":306},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1423,"byte_end":1430,"line_start":55,"line_end":55,"column_start":5,"column_end":12},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1484},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1436,"byte_end":1445,"line_start":56,"line_end":56,"column_start":5,"column_end":14},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1451,"byte_end":1463,"line_start":57,"line_end":57,"column_start":5,"column_end":17},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1496},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1469,"byte_end":1478,"line_start":58,"line_end":58,"column_start":5,"column_end":14},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":344},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1484,"byte_end":1492,"line_start":59,"line_end":59,"column_start":5,"column_end":13},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":380},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1498,"byte_end":1508,"line_start":60,"line_end":60,"column_start":5,"column_end":15},"alias_span":null,"name":"MendSlices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1502},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1514,"byte_end":1526,"line_start":61,"line_end":61,"column_start":5,"column_end":17},"alias_span":null,"name":"Combinations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":454},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1532,"byte_end":1545,"line_start":62,"line_end":62,"column_start":5,"column_end":18},"alias_span":null,"name":"CombinationsN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1514},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1551,"byte_end":1557,"line_start":63,"line_end":63,"column_start":5,"column_end":11},"alias_span":null,"name":"Unique","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1508},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1563,"byte_end":1571,"line_start":64,"line_end":64,"column_start":5,"column_end":13},"alias_span":null,"name":"UniqueBy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":488},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1577,"byte_end":1584,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":768},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1752,"byte_end":1761,"line_start":70,"line_end":70,"column_start":16,"column_end":25},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":766},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1763,"byte_end":1767,"line_start":70,"line_end":70,"column_start":27,"column_end":31},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":574},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1787,"byte_end":1793,"line_start":71,"line_end":71,"column_start":18,"column_end":24},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1795,"byte_end":1808,"line_start":71,"line_end":71,"column_start":26,"column_end":39},"alias_span":null,"name":"FormatDefault","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":534},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1826,"byte_end":1835,"line_start":72,"line_end":72,"column_start":16,"column_end":25},"alias_span":null,"name":"enumerate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":536},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1837,"byte_end":1840,"line_start":72,"line_end":72,"column_start":27,"column_end":30},"alias_span":null,"name":"rev","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":686},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1865,"byte_end":1875,"line_start":73,"line_end":73,"column_start":23,"column_end":33},"alias_span":null,"name":"ChunksLazy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":710},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1877,"byte_end":1882,"line_start":73,"line_end":73,"column_start":35,"column_end":40},"alias_span":null,"name":"Chunk","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":702},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1884,"byte_end":1890,"line_start":73,"line_end":73,"column_start":42,"column_end":48},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":646},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1892,"byte_end":1903,"line_start":73,"line_end":73,"column_start":50,"column_end":61},"alias_span":null,"name":"GroupByLazy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":672},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1905,"byte_end":1910,"line_start":73,"line_end":73,"column_start":63,"column_end":68},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":664},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1912,"byte_end":1918,"line_start":73,"line_end":73,"column_start":70,"column_end":76},"alias_span":null,"name":"Groups","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1562},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1942,"byte_end":1953,"line_start":74,"line_end":74,"column_start":22,"column_end":33},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1568},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1971,"byte_end":1977,"line_start":75,"line_end":75,"column_start":17,"column_end":23},"alias_span":null,"name":"ISlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":822},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1995,"byte_end":2001,"line_start":76,"line_end":76,"column_start":17,"column_end":23},"alias_span":null,"name":"KMerge","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":866},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2107,"byte_end":2115,"line_start":78,"line_end":78,"column_start":20,"column_end":28},"alias_span":null,"name":"linspace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1576},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2117,"byte_end":2125,"line_start":78,"line_end":78,"column_start":30,"column_end":38},"alias_span":null,"name":"Linspace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1586},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2144,"byte_end":2156,"line_start":79,"line_end":79,"column_start":17,"column_end":29},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1682},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2176,"byte_end":2184,"line_start":80,"line_end":80,"column_start":19,"column_end":27},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1028},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2202,"byte_end":2208,"line_start":81,"line_end":81,"column_start":17,"column_end":23},"alias_span":null,"name":"RcIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1060},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2227,"byte_end":2234,"line_start":82,"line_end":82,"column_start":18,"column_end":25},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1082},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2254,"byte_end":2264,"line_start":83,"line_end":83,"column_start":19,"column_end":29},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1688},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2266,"byte_end":2272,"line_start":83,"line_end":83,"column_start":31,"column_end":37},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1150},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2376,"byte_end":2382,"line_start":85,"line_end":85,"column_start":17,"column_end":23},"alias_span":null,"name":"Stride","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1158},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2485,"byte_end":2494,"line_start":87,"line_end":87,"column_start":17,"column_end":26},"alias_span":null,"name":"StrideMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1200},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2509,"byte_end":2512,"line_start":88,"line_end":88,"column_start":14,"column_end":17},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1782},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2530,"byte_end":2535,"line_start":89,"line_end":89,"column_start":17,"column_end":22},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1788},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2559,"byte_end":2569,"line_start":90,"line_end":90,"column_start":23,"column_end":33},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1794},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2571,"byte_end":2583,"line_start":90,"line_end":90,"column_start":35,"column_end":47},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1814},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2604,"byte_end":2607,"line_start":91,"line_end":91,"column_start":19,"column_end":22},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1964},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2884,"byte_end":2893,"line_start":96,"line_end":96,"column_start":20,"column_end":29},"alias_span":null,"name":"ZipSlices","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":54397,"line_start":1,"line_end":1685,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":64},{"krate":0,"index":70},{"krate":0,"index":76},{"krate":0,"index":82},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":510},{"krate":0,"index":568},{"krate":0,"index":590},{"krate":0,"index":722},{"krate":0,"index":740},{"krate":0,"index":762},{"krate":0,"index":770},{"krate":0,"index":838},{"krate":0,"index":868},{"krate":0,"index":876},{"krate":0,"index":996},{"krate":0,"index":1020},{"krate":0,"index":1058},{"krate":0,"index":1080},{"krate":0,"index":1112},{"krate":0,"index":1134},{"krate":0,"index":1188},{"krate":0,"index":1214},{"krate":0,"index":1230},{"krate":0,"index":1270},{"krate":0,"index":1282},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1324},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440}],"decl_id":null,"docs":" Itertools — extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":157,"byte_end":183,"line_start":7,"line_end":7,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1442},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":55389,"byte_end":55399,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1117}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":55588,"byte_end":55591,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Interleave<I, J>>::new","value":"fn (a: I, b: J) -> Interleave<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Creat a new `Interleave` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1448},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":56521,"byte_end":56539,"line_start":87,"line_end":87,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1129},{"krate":0,"index":1131}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":56846,"byte_end":56849,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<InterleaveShortest<I, J>>::new","value":"fn (a: I, b: J) -> InterleaveShortest<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `InterleaveShortest` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1454},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":58732,"byte_end":58739,"line_start":164,"line_end":164,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":1139},{"krate":0,"index":1141}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":58914,"byte_end":58917,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<PutBack<I>>::new","value":"fn (it: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Iterator element type is `A`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":58893,"byte_end":58902,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":59103,"byte_end":59113,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"fn (value: I::Item, it: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `PutBack` along with the `value` to put back.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":59082,"byte_end":59091,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":59303,"byte_end":59313,"line_start":194,"line_end":194,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"fn (self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":59282,"byte_end":59291,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":59578,"byte_end":59586,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":59557,"byte_end":59566,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":208},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":60279,"byte_end":60287,"line_start":230,"line_end":230,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::adaptors::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":47}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":60436,"byte_end":60439,"line_start":238,"line_end":238,"column_start":12,"column_end":15},"name":"new","qualname":"<PutBackN<I>>::new","value":"fn (it: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Iterator element type is `A`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":60415,"byte_end":60424,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":60886,"byte_end":60894,"line_start":259,"line_end":259,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts x in front of the iterator.\n The values are yielded in order.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":60865,"byte_end":60874,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1460},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":61833,"byte_end":61840,"line_start":297,"line_end":297,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":1149},{"krate":0,"index":1151},{"krate":0,"index":1153},{"krate":0,"index":1155}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":62165,"byte_end":62168,"line_start":314,"line_end":314,"column_start":12,"column_end":15},"name":"new","qualname":"<Product<I, J>>::new","value":"fn (mut i: I, j: J) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new cartesian product iterator","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1466},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":63874,"byte_end":63882,"line_start":372,"line_end":372,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":1165},{"krate":0,"index":1167}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":63996,"byte_end":63999,"line_start":379,"line_end":379,"column_start":12,"column_end":15},"name":"new","qualname":"<Batching<I, F>>::new","value":"fn (iter: I, f: F) -> Batching<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Batching iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1472},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":64715,"byte_end":64722,"line_start":406,"line_end":406,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::adaptors::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":1179},{"krate":0,"index":1181},{"krate":0,"index":1183},{"krate":0,"index":1185}],"decl_id":null,"docs":" An iterator adaptor that groups iterator elements. Consecutive elements\n that map to the same key (“runs”), are returned as the iterator elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":64943,"byte_end":64946,"line_start":419,"line_end":419,"column_start":12,"column_end":15},"name":"new","qualname":"<GroupBy<K, I, F>>::new","value":"fn (iter: I, key: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `GroupBy` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1478},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":66697,"byte_end":66701,"line_start":478,"line_end":478,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1197}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":66876,"byte_end":66879,"line_start":489,"line_end":489,"column_start":12,"column_end":15},"name":"new","qualname":"<Step<I>>::new","value":"fn (iter: I, step: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Step` iterator.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":290},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":69425,"byte_end":69430,"line_start":593,"line_end":593,"column_start":12,"column_end":17},"name":"Merge","qualname":"::adaptors::Merge","value":"Merge {  }","parent":null,"children":[{"krate":0,"index":117}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":306},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":70692,"byte_end":70699,"line_start":647,"line_end":647,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1484},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":73469,"byte_end":73478,"line_start":757,"line_end":757,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::adaptors::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":1203},{"krate":0,"index":1205},{"krate":0,"index":1207}],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing itself.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":73652,"byte_end":73655,"line_start":767,"line_end":767,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiPeek<I>>::new","value":"fn (iter: I) -> MultiPeek<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a `MultiPeek` iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":73986,"byte_end":73990,"line_start":778,"line_end":778,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"fn (&mut self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like `.next()` with the only difference that it doesn't\n advance itself. `.peek()` can be called multiple times, to peek\n further ahead.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":344},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":76091,"byte_end":76099,"line_start":862,"line_end":862,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":177}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":76450,"byte_end":76453,"line_start":882,"line_end":882,"column_start":12,"column_end":15},"name":"new","qualname":"<Coalesce<I, F>>::new","value":"fn (mut iter: I, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Coalesce`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":77150,"byte_end":77155,"line_start":911,"line_end":911,"column_start":12,"column_end":17},"name":"Dedup","qualname":"::adaptors::Dedup","value":"Dedup {  }","parent":null,"children":[{"krate":0,"index":193}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":77459,"byte_end":77462,"line_start":930,"line_end":930,"column_start":12,"column_end":15},"name":"new","qualname":"<Dedup<I>>::new","value":"fn (mut iter: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Dedup`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":78162,"byte_end":78172,"line_start":960,"line_end":960,"column_start":12,"column_end":22},"name":"MendSlices","qualname":"::adaptors::MendSlices","value":"MendSlices {  }","parent":null,"children":[{"krate":0,"index":205}],"decl_id":null,"docs":" An iterator adaptor that glues together adjacent contiguous slices.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":78496,"byte_end":78499,"line_start":979,"line_end":979,"column_start":12,"column_end":15},"name":"new","qualname":"<MendSlices<I>>::new","value":"fn (mut iter: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `MendSlices`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":398},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":79219,"byte_end":79231,"line_start":1008,"line_end":1008,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":221}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":79438,"byte_end":79441,"line_start":1017,"line_end":1017,"column_start":12,"column_end":15},"name":"new","qualname":"<TakeWhileRef<'a, I, F>>::new","value":"fn (iter: &'a mut I, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TakeWhileRef` from a reference to clonable iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1496},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":80413,"byte_end":80422,"line_start":1054,"line_end":1054,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":1221}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":80515,"byte_end":80518,"line_start":1060,"line_end":1060,"column_start":12,"column_end":15},"name":"new","qualname":"<WhileSome<I>>::new","value":"fn (iter: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `WhileSome<I>`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1502},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":81172,"byte_end":81184,"line_start":1087,"line_end":1087,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::adaptors::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1231}],"decl_id":null,"docs":" An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":81388,"byte_end":81391,"line_start":1096,"line_end":1096,"column_start":12,"column_end":15},"name":"new","qualname":"<Combinations<I>>::new","value":"fn (iter: I) -> Combinations<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Combinations` from a clonable iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":454},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":84278,"byte_end":84291,"line_start":1213,"line_end":1213,"column_start":12,"column_end":25},"name":"CombinationsN","qualname":"::adaptors::CombinationsN","value":"CombinationsN {  }","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":269}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":84513,"byte_end":84516,"line_start":1223,"line_end":1223,"column_start":12,"column_end":15},"name":"new","qualname":"<CombinationsN<I>>::new","value":"fn (iter: I, n: usize) -> CombinationsN<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CombinationsN` from a clonable iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1508},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":86705,"byte_end":86713,"line_start":1302,"line_end":1302,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::adaptors::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1245}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":86938,"byte_end":86941,"line_start":1313,"line_end":1313,"column_start":12,"column_end":15},"name":"new","qualname":"<UniqueBy<I, V, F>>::new","value":"fn (iter: I, f: F) -> UniqueBy<I, V, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UniqueBy` iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1514},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":88744,"byte_end":88750,"line_start":1382,"line_end":1382,"column_start":12,"column_end":18},"name":"Unique","qualname":"::adaptors::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":1255}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":488},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":89185,"byte_end":89192,"line_start":1402,"line_end":1402,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::adaptors::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":293}],"decl_id":null,"docs":" An iterator adapter to simply flatten a structure.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":89439,"byte_end":89442,"line_start":1414,"line_end":1414,"column_start":12,"column_end":15},"name":"new","qualname":"<Flatten<I>>::new","value":"fn (iter: I) -> Flatten<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Flatten` iterator.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":510},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\free.rs","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":520},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":534},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":90867,"byte_end":90876,"line_start":28,"line_end":28,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"fn <I> (iterable: I) -> iter::Enumerate<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":91198,"byte_end":91201,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"fn <I> (iterable: I) -> iter::Rev<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":91608,"byte_end":91611,"line_start":64,"line_end":64,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"fn <I, J> (i: I, j: J) -> Zip<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":92095,"byte_end":92101,"line_start":85,"line_end":85,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::free::zip_eq","value":"fn <I, J> (i: I, j: J) -> ZipEq<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":92492,"byte_end":92497,"line_start":103,"line_end":103,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"fn <I, J> (i: I, j: J) -> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":92926,"byte_end":92932,"line_start":119,"line_end":119,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"fn <'a, I, T> (iterable: I) -> iter::Cloned<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":93326,"byte_end":93330,"line_start":135,"line_end":135,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"fn <I, B, F> (iterable: I, init: B, f: F) -> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":93711,"byte_end":93714,"line_start":151,"line_end":151,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":94080,"byte_end":94083,"line_start":167,"line_end":167,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":94414,"byte_end":94417,"line_start":183,"line_end":183,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":94736,"byte_end":94739,"line_start":199,"line_end":199,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":95137,"byte_end":95147,"line_start":217,"line_end":217,"column_start":8,"column_end":18},"name":"interleave","qualname":"::free::interleave","value":"fn <I, J> (i: I, j: J) -> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":95604,"byte_end":95609,"line_start":235,"line_end":235,"column_start":8,"column_end":13},"name":"merge","qualname":"::free::merge","value":"fn <I, J> (i: I, j: J) -> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":96117,"byte_end":96123,"line_start":254,"line_end":254,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::free::kmerge","value":"fn <I> (i: I) -> KMerge<<<I as IntoIterator>::Item as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":96604,"byte_end":96608,"line_start":271,"line_end":271,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"fn <I> (iterable: I, sep: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":97039,"byte_end":97045,"line_start":288,"line_end":288,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"fn <I> (iterable: I) -> Vec<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Collect all the iterable's elements into a sorted vector in ascending order.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,114,101,101,46,114,115],"byte_start":98206,"byte_end":98212,"line_start":322,"line_end":322,"column_start":8,"column_end":14},"name":"rciter","qualname":"::free::rciter","value":"fn <I> (iterable: I) -> RcIter<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":574},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":98611,"byte_end":98617,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":369}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1520},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":99041,"byte_end":99054,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"FormatDefault","qualname":"::format::FormatDefault","value":"FormatDefault {  }","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1265}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":602},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":101540,"byte_end":101543,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":600},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":646},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":110419,"byte_end":110430,"line_start":284,"line_end":284,"column_start":12,"column_end":23},"name":"GroupByLazy","qualname":"::groupbylazy::GroupByLazy","value":"GroupByLazy {  }","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":467}],"decl_id":null,"docs":" `GroupByLazy` is the storage for the lazy grouping operation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":664},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":112216,"byte_end":112222,"line_start":353,"line_end":353,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":497}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":672},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":113094,"byte_end":113099,"line_start":387,"line_end":387,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":521}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":686},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":114945,"byte_end":114955,"line_start":458,"line_end":458,"column_start":12,"column_end":22},"name":"ChunksLazy","qualname":"::groupbylazy::ChunksLazy","value":"ChunksLazy {  }","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":545}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":702},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":116011,"byte_end":116017,"line_start":502,"line_end":502,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":557}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":710},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":116735,"byte_end":116740,"line_start":533,"line_end":533,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":573}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1562},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":117690,"byte_end":117701,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1315},{"krate":0,"index":1317}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":117900,"byte_end":117903,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<Intersperse<I>>::new","value":"fn (iter: I, elt: I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Intersperse iterator\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1568},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,115,108,105,99,101,46,114,115],"byte_start":119328,"byte_end":119334,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"ISlice","qualname":"::islice::ISlice","value":"ISlice {  }","parent":null,"children":[{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1327}],"decl_id":null,"docs":" An iterator adaptor that yields a subset (a slice) of the base iterator.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,115,108,105,99,101,46,114,115],"byte_start":119317,"byte_end":119388,"line_start":20,"line_end":24,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,115,108,105,99,101,46,114,115],"byte_start":119476,"byte_end":119479,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<ISlice<I>>::new","value":"fn <R> (iter: I, range: R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new **ISlice**.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":599},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":121443,"byte_end":121456,"line_start":20,"line_end":20,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":607},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":121589,"byte_end":121596,"line_start":22,"line_end":22,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":613},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":121717,"byte_end":121723,"line_start":24,"line_end":24,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":766},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":121240,"byte_end":121244,"line_start":14,"line_end":14,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"Diff::{FirstMismatch, Shorter, Longer}","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":607},{"krate":0,"index":613}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,100,105,102,102,46,114,115],"byte_start":122472,"byte_end":122481,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"fn <I, J, F> (i: I, j: J, is_equal: F) -> Option<Diff<I::IntoIter, J::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":822},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":127173,"byte_end":127179,"line_start":157,"line_end":157,"column_start":12,"column_end":18},"name":"KMerge","qualname":"::kmerge::KMerge","value":"KMerge {  }","parent":null,"children":[{"krate":0,"index":653}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1576},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,110,115,112,97,99,101,46,114,115],"byte_start":128684,"byte_end":128692,"line_start":8,"line_end":8,"column_start":12,"column_end":20},"name":"Linspace","qualname":"::linspace::Linspace","value":"Linspace {  }","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1341}],"decl_id":null,"docs":" An iterator of a sequence of evenly spaced floats.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":866},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,110,115,112,97,99,101,46,114,115],"byte_start":130304,"byte_end":130312,"line_start":76,"line_end":76,"column_start":8,"column_end":16},"name":"linspace","qualname":"::linspace::linspace","value":"fn <F> (a: F, b: F, n: usize) -> Linspace<F>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of evenly spaced floats.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,110,115,112,97,99,101,46,114,115],"byte_start":130287,"byte_end":130296,"line_start":75,"line_end":75,"column_start":1,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1349},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":130873,"byte_end":130883,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1351},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":130965,"byte_end":130975,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1355},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":131088,"byte_end":131094,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":1586},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1586},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":130828,"byte_end":130840,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"MinMaxResult::{NoElements, OneElement, MinMax}","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":1351},{"krate":0,"index":1355}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":131914,"byte_end":131925,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"fn (self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise variant `Some(x, y)` is returned where `x <= y`.\n If `MinMaxResult` has variant `OneElement(x)`, performing this operation\n will make one clone of `x`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":876},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"misc","qualname":"::misc","value":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\misc.rs","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":898},{"krate":0,"index":904},{"krate":0,"index":1670},{"krate":0,"index":1664},{"krate":0,"index":1658},{"krate":0,"index":1652},{"krate":0,"index":1646},{"krate":0,"index":1640},{"krate":0,"index":1634},{"krate":0,"index":1628},{"krate":0,"index":1622},{"krate":0,"index":1616},{"krate":0,"index":1610},{"krate":0,"index":1604},{"krate":0,"index":1598},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":906},{"krate":0,"index":910},{"krate":0,"index":918},{"krate":0,"index":922},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":934},{"krate":0,"index":938},{"krate":0,"index":944},{"krate":0,"index":948},{"krate":0,"index":952},{"krate":0,"index":956},{"krate":0,"index":960},{"krate":0,"index":964},{"krate":0,"index":968},{"krate":0,"index":972},{"krate":0,"index":980},{"krate":0,"index":988}],"decl_id":null,"docs":" A module of helper traits and iterators that are not intended to be used\n directly.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":892},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":134793,"byte_end":134810,"line_start":15,"line_end":15,"column_start":11,"column_end":28},"name":"IntoIteratorTuple","qualname":"::misc::IntoIteratorTuple","value":"IntoIteratorTuple","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":896}],"decl_id":null,"docs":" Apply `IntoIterator` on each element of a tuple.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":894},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":134873,"byte_end":134879,"line_start":18,"line_end":18,"column_start":10,"column_end":16},"name":"Output","qualname":"::misc::IntoIteratorTuple::Output","value":"type Output;","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Tuple of values that implement `Iterator`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":134926,"byte_end":134945,"line_start":21,"line_end":21,"column_start":8,"column_end":27},"name":"into_iterator_tuple","qualname":"::misc::IntoIteratorTuple::into_iterator_tuple","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return a tuple of iterators.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":898},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":135076,"byte_end":135087,"line_start":26,"line_end":26,"column_start":11,"column_end":22},"name":"AppendTuple","qualname":"::misc::AppendTuple","value":"AppendTuple<X>","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":902}],"decl_id":null,"docs":" A helper trait for (x, y, z) ++ w => (x, y, z, w),\n used for implementing `iproduct!`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":900},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":135131,"byte_end":135137,"line_start":28,"line_end":28,"column_start":10,"column_end":16},"name":"Result","qualname":"::misc::AppendTuple::Result","value":"type Result;","parent":{"krate":0,"index":898},"children":[],"decl_id":null,"docs":" Resulting tuple type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":135189,"byte_end":135195,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"append","qualname":"::misc::AppendTuple::append","value":"fn (self, x: X) -> Self::Result","parent":{"krate":0,"index":898},"children":[],"decl_id":null,"docs":" “Append” value `x` to a tuple.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1676},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":136055,"byte_end":136065,"line_start":63,"line_end":63,"column_start":12,"column_end":22},"name":"FlatTuples","qualname":"::misc::FlatTuples","value":"FlatTuples {  }","parent":null,"children":[{"krate":0,"index":1549}],"decl_id":null,"docs":" A helper iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":136176,"byte_end":136179,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"new","qualname":"<FlatTuples<I>>::new","value":"fn (iter: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FlatTuples`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":922},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":136984,"byte_end":136996,"line_start":102,"line_end":102,"column_start":11,"column_end":23},"name":"GenericRange","qualname":"::misc::GenericRange","value":"GenericRange","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":926}],"decl_id":null,"docs":" `GenericRange` is implemented by Rust's built-in range types, produced\n by range syntax like `a..`, `..b` or `c..d`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137057,"byte_end":137062,"line_start":105,"line_end":105,"column_start":8,"column_end":13},"name":"start","qualname":"::misc::GenericRange::start","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":922},"children":[],"decl_id":null,"docs":" Start index (inclusive)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137164,"byte_end":137167,"line_start":110,"line_end":110,"column_start":8,"column_end":11},"name":"end","qualname":"::misc::GenericRange::end","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":922},"children":[],"decl_id":null,"docs":" End index (exclusive)\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":944},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137719,"byte_end":137726,"line_start":140,"line_end":140,"column_start":11,"column_end":18},"name":"ToFloat","qualname":"::misc::ToFloat","value":"ToFloat<F>: Copy","parent":null,"children":[{"krate":0,"index":946}],"decl_id":null,"docs":" Helper trait to convert usize to floating point type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137797,"byte_end":137805,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"to_float","qualname":"::misc::ToFloat::to_float","value":"fn (self) -> F","parent":{"krate":0,"index":944},"children":[],"decl_id":null,"docs":" Convert usize to float.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":956},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":138114,"byte_end":138123,"line_start":161,"line_end":161,"column_start":11,"column_end":20},"name":"MendSlice","qualname":"::misc::MendSlice","value":"MendSlice","parent":null,"children":[{"krate":0,"index":958}],"decl_id":null,"docs":" A trait for items that can *maybe* be joined together.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":138219,"byte_end":138223,"line_start":165,"line_end":165,"column_start":8,"column_end":12},"name":"mend","qualname":"::misc::MendSlice::mend","value":"fn (Self, Self) -> Result<Self, (Self, Self)>","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" If the slices are contiguous, return them joined into one.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":972},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":139485,"byte_end":139490,"line_start":209,"line_end":209,"column_start":18,"column_end":23},"name":"Slice","qualname":"::misc::Slice","value":"Slice","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":976},{"krate":0,"index":978}],"decl_id":null,"docs":" A helper trait to let `ZipSlices` accept both `&[T]` and `&mut [T]`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":974},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":139558,"byte_end":139562,"line_start":211,"line_end":211,"column_start":10,"column_end":14},"name":"Item","qualname":"::misc::Slice::Item","value":"type Item;","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":" The type of a reference to the slice's elements\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":139590,"byte_end":139593,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"len","qualname":"::misc::Slice::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":139644,"byte_end":139657,"line_start":215,"line_end":215,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::misc::Slice::get_unchecked","value":"fn (&mut self, i: usize) -> Self::Item","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1682},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":140693,"byte_end":140701,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1561},{"krate":0,"index":1563}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":140922,"byte_end":140925,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<PadUsing<I, F>>::new","value":"fn (iter: I, min: usize, filler: F) -> PadUsing<I, F>","parent":null,"children":[],"decl_id":null,"docs":" Create a new **PadUsing** iterator.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1028},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":142699,"byte_end":142705,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":741}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":741},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":142747,"byte_end":142753,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":1028},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":142834,"byte_end":142837,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<RcIter<I>>::new","value":"fn (iter: I) -> RcIter<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a new RcIter.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1060},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":144139,"byte_end":144146,"line_start":3,"line_end":3,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":761}],"decl_id":null,"docs":" An iterator that repeats an element exactly *n* times.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":144278,"byte_end":144281,"line_start":10,"line_end":10,"column_start":12,"column_end":15},"name":"new","qualname":"<RepeatN<A>>::new","value":"fn (elt: A, n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new **RepeatN** with **n** repetitions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1082},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":145694,"byte_end":145704,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":773}],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":145808,"byte_end":145811,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<RepeatCall<F>>::new","value":"fn <A> (func: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `RepeatCall` from a closure.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1688},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":147484,"byte_end":147490,"line_start":97,"line_end":97,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1575}],"decl_id":null,"docs":" `Unfold` is a general iterator builder: it has a mutable state value,\n and a closure with access to the state that produces the next value.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1575},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":147598,"byte_end":147603,"line_start":100,"line_end":100,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":1688},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":147857,"byte_end":147860,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<Unfold<St, F>>::new","value":"fn (initial_state: St, f: F) -> Unfold<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":147836,"byte_end":147845,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1112},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"size_hint","qualname":"::size_hint","value":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\itertools-0.4.19\\src\\size_hint.rs","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132}],"decl_id":null,"docs":" Arithmetic on **Iterator** *.size_hint()* values.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1118},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":148499,"byte_end":148507,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"SizeHint","qualname":"::size_hint::SizeHint","value":"(usize, Option<usize>)","parent":null,"children":[],"decl_id":null,"docs":" **SizeHint** is the return type of **Iterator::size_hint()**.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1120},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":148584,"byte_end":148587,"line_start":12,"line_end":12,"column_start":8,"column_end":11},"name":"add","qualname":"::size_hint::add","value":"fn (a: SizeHint, b: SizeHint) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Add **SizeHint** correctly.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":148567,"byte_end":148576,"line_start":11,"line_end":11,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1122},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":148872,"byte_end":148882,"line_start":24,"line_end":24,"column_start":8,"column_end":18},"name":"add_scalar","qualname":"::size_hint::add_scalar","value":"fn (sh: SizeHint, x: usize) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Add **x** correctly to a **SizeHint**.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":148855,"byte_end":148864,"line_start":23,"line_end":23,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1124},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":149111,"byte_end":149121,"line_start":33,"line_end":33,"column_start":8,"column_end":18},"name":"sub_scalar","qualname":"::size_hint::sub_scalar","value":"fn (sh: SizeHint, x: usize) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Sbb **x** correctly to a **SizeHint**.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":149094,"byte_end":149103,"line_start":32,"line_end":32,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1126},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":149616,"byte_end":149626,"line_start":53,"line_end":53,"column_start":8,"column_end":18},"name":"mul_scalar","qualname":"::size_hint::mul_scalar","value":"fn (sh: SizeHint, x: usize) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Multiply **x** correctly with a **SizeHint**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":149599,"byte_end":149608,"line_start":52,"line_end":52,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1128},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":150286,"byte_end":150289,"line_start":80,"line_end":80,"column_start":8,"column_end":11},"name":"mul","qualname":"::size_hint::mul","value":"fn (a: SizeHint, b: SizeHint) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Multiply **SizeHint** correctly","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":150269,"byte_end":150278,"line_start":79,"line_end":79,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1130},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":150605,"byte_end":150608,"line_start":92,"line_end":92,"column_start":8,"column_end":11},"name":"max","qualname":"::size_hint::max","value":"fn (a: SizeHint, b: SizeHint) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":150588,"byte_end":150597,"line_start":91,"line_end":91,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1132},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":150943,"byte_end":150946,"line_start":108,"line_end":108,"column_start":8,"column_end":11},"name":"min","qualname":"::size_hint::min","value":"fn (a: SizeHint, b: SizeHint) -> SizeHint","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,105,122,101,95,104,105,110,116,46,114,115],"byte_start":150926,"byte_end":150935,"line_start":107,"line_end":107,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1150},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":151858,"byte_end":151864,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"Stride","qualname":"::stride::Stride","value":"Stride {  }","parent":null,"children":[{"krate":0,"index":809},{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":815},{"krate":0,"index":817}],"decl_id":null,"docs":" An iterator similar to the slice iterator, but with a certain number of steps\n (the stride) skipped per iteration.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1158},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152445,"byte_end":152454,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"StrideMut","qualname":"::stride::StrideMut","value":"StrideMut {  }","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":839},{"krate":0,"index":841},{"krate":0,"index":843}],"decl_id":null,"docs":" The mutable equivalent of Stride.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152810,"byte_end":152822,"line_start":53,"line_end":53,"column_start":19,"column_end":31},"name":"from_ptr_len","qualname":"<Stride<'a, A>>::from_ptr_len","value":"fn (begin: *const A, nelem: usize, stride: isize) -> Stride<'a, A>","parent":null,"children":[],"decl_id":null,"docs":" Create a Stride iterator from a raw pointer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":153191,"byte_end":153203,"line_start":68,"line_end":68,"column_start":19,"column_end":31},"name":"from_ptr_len","qualname":"<StrideMut<'a, A>>::from_ptr_len","value":"fn (begin: *mut A, nelem: usize, stride: isize) -> StrideMut<'a, A>","parent":null,"children":[],"decl_id":null,"docs":" Create a StrideMut iterator from a raw pointer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":160560,"byte_end":160567,"line_start":286,"line_end":286,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<StrideMut<'a, A>>::get_mut","value":"fn <'b> (&'b mut self, i: usize) -> Option<&'b mut A>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the element of a stride at the\n given index, or None if the index is out of bounds.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1200},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,116,101,101,46,114,115],"byte_start":161726,"byte_end":161729,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":889},{"krate":0,"index":891}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1782},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,101,113,46,114,115],"byte_start":163580,"byte_end":163585,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":1649},{"krate":0,"index":1651}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,101,113,46,114,115],"byte_start":163495,"byte_end":163568,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1788},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":164955,"byte_end":164965,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1663}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":164870,"byte_end":164943,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":165139,"byte_end":165142,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<ZipLongest<T, U>>::new","value":"fn (a: T, b: U) -> ZipLongest<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ZipLongest` iterator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1673},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":167090,"byte_end":167094,"line_start":89,"line_end":89,"column_start":5,"column_end":9},"name":"Both","qualname":"::zip_longest::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":1794},"children":[],"decl_id":null,"docs":" Neither input iterator is exhausted yet, yielding two values.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1679},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":167227,"byte_end":167231,"line_start":92,"line_end":92,"column_start":5,"column_end":9},"name":"Left","qualname":"::zip_longest::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":1794},"children":[],"decl_id":null,"docs":" The parameter iterator of `.zip_longest()` is exhausted,\n only yielding a value from the `self` iterator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1683},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":167361,"byte_end":167366,"line_start":95,"line_end":95,"column_start":5,"column_end":10},"name":"Right","qualname":"::zip_longest::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":1794},"children":[],"decl_id":null,"docs":" The `self` iterator of `.zip_longest()` is exhausted,\n only yielding a value from the parameter iterator.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1794},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":166995,"byte_end":167007,"line_start":87,"line_end":87,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::zip_longest::EitherOrBoth","value":"EitherOrBoth::{Both, Left, Right}","parent":null,"children":[{"krate":0,"index":1673},{"krate":0,"index":1679},{"krate":0,"index":1683}],"decl_id":null,"docs":" A value yielded by `ZipLongest`.\n Contains one or two values, depending on which of the input iterators are exhausted.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":166986,"byte_end":167372,"line_start":87,"line_end":96,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1814},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,116,117,112,108,101,46,114,115],"byte_start":168163,"byte_end":168166,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":1705}],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,116,117,112,108,101,46,114,115],"byte_start":168334,"byte_end":168337,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Zip<T>>::new","value":"fn (t: T) -> Zip<T::Output>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Zip` from a tuple of iterators.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1964},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":171312,"byte_end":171321,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"name":"ZipSlices","qualname":"::zipslices::ZipSlices","value":"ZipSlices {  }","parent":null,"children":[{"krate":0,"index":1983},{"krate":0,"index":1985},{"krate":0,"index":1987},{"krate":0,"index":1989}],"decl_id":null,"docs":" An iterator which iterates two slices simultaneously.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":171703,"byte_end":171706,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<ZipSlices<&'a [A], &'b [B]>>::new","value":"fn (a: &'a [A], b: &'b [B]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ZipSlices` from slices `a` and `b`.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":171674,"byte_end":171691,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":172243,"byte_end":172254,"line_start":60,"line_end":60,"column_start":12,"column_end":23},"name":"from_slices","qualname":"<ZipSlices<T, U>>::from_slices","value":"fn (a: T, b: U) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ZipSlices` from slices `a` and `b`.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":172214,"byte_end":172231,"line_start":59,"line_end":59,"column_start":5,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":1318},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3312,"byte_end":3317,"line_start":123,"line_end":123,"column_start":10,"column_end":15},"name":"MapFn","qualname":"::MapFn","value":"iter::Map<I, fn(I::Item) -> B>","parent":null,"children":[],"decl_id":null,"docs":" The function pointer map iterator created with `.map_fn()`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1324},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5868,"byte_end":5877,"line_start":206,"line_end":206,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1426},{"krate":0,"index":1428}],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6266,"byte_end":6276,"line_start":222,"line_end":222,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"fn <J> (self, other: J) -> Interleave<Self, J::IntoIter>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both\n run out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6792,"byte_end":6811,"line_start":239,"line_end":239,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"fn <J> (self, other: J) -> InterleaveShortest<Self, J::IntoIter>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until one of them runs out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7384,"byte_end":7395,"line_start":258,"line_end":258,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"fn (self, element: Self::Item) -> Intersperse<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8226,"byte_end":8237,"line_start":283,"line_end":283,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"fn <J> (self, other: J) -> ZipLongest<Self, J::IntoIter>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8209,"byte_end":8218,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8666,"byte_end":8672,"line_start":296,"line_end":296,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"fn <J> (self, other: J) -> ZipEq<Self, J::IntoIter>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8649,"byte_end":8658,"line_start":295,"line_end":295,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9603,"byte_end":9611,"line_start":325,"line_end":325,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"fn <B, F> (self, f: F) -> Batching<Self, F>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10450,"byte_end":10458,"line_start":349,"line_end":349,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"fn <K, F> (self, key: F) -> GroupBy<K, Self, F>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Group iterator elements. Consecutive elements that map to the same key (“runs”),\n are returned as the iterator elements of `GroupBy`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":12081,"byte_end":12094,"line_start":390,"line_end":390,"column_start":8,"column_end":21},"name":"group_by_lazy","qualname":"::Itertools::group_by_lazy","value":"fn <K, F> (self, key: F) -> GroupByLazy<K, Self, F>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterable that can group iterator elements.\n Consecutive elements that map to the same key (“runs”), are assigned\n to the same group.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13344,"byte_end":13355,"line_start":424,"line_end":424,"column_start":8,"column_end":19},"name":"chunks_lazy","qualname":"::Itertools::chunks_lazy","value":"fn (self, size: usize) -> ChunksLazy<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterable that can chunk the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14256,"byte_end":14259,"line_start":453,"line_end":453,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"fn (self) -> (Tee<Self>, Tee<Self>)","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Split into an iterator pair that both yield all elements from\n the original iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14799,"byte_end":14804,"line_start":474,"line_end":474,"column_start":8,"column_end":13},"name":"slice","qualname":"::Itertools::slice","value":"fn <R> (self, range: R) -> ISlice<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return a sliced iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16320,"byte_end":16327,"line_start":512,"line_end":512,"column_start":8,"column_end":15},"name":"into_rc","qualname":"::Itertools::into_rc","value":"fn (self) -> RcIter<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" **Deprecated:** use `itertools::free::rciter` instead.\n (It's an iterator constructor, not an adaptor).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16925,"byte_end":16929,"line_start":534,"line_end":534,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"fn (self, n: usize) -> Step<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17489,"byte_end":17494,"line_start":553,"line_end":553,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"fn <J> (self, other: J) -> Merge<Self, J::IntoIter>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18297,"byte_end":18305,"line_start":577,"line_end":577,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"fn <J, F> (self, other: J, is_first: F) -> MergeBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like `.merge()` but allows for a custom ordering.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19135,"byte_end":19141,"line_start":601,"line_end":601,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"fn (self) -> KMerge<<<Self as Iterator>::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them in ascending order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19812,"byte_end":19829,"line_start":620,"line_end":620,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"fn <J> (self, other: J) -> Product<Self, J::IntoIter>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21294,"byte_end":21303,"line_start":665,"line_end":665,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::Itertools::multipeek","value":"fn (self) -> MultiPeek<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adapter that allows peeking multiple values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":22434,"byte_end":22442,"line_start":697,"line_end":697,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"fn <F> (self, f: F) -> Coalesce<Self, F>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23151,"byte_end":23156,"line_start":719,"line_end":719,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"fn (self) -> Dedup<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":23810,"byte_end":23816,"line_start":740,"line_end":740,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"fn (self) -> Unique<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration. Duplicates\n are detected using hash and equality.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":24538,"byte_end":24547,"line_start":761,"line_end":761,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"fn <V, F> (self, f: F) -> UniqueBy<Self, V, F>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":25608,"byte_end":25619,"line_start":787,"line_end":787,"column_start":8,"column_end":19},"name":"mend_slices","qualname":"::Itertools::mend_slices","value":"fn (self) -> MendSlices<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that joins together adjacent slices if possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26458,"byte_end":26472,"line_start":811,"line_end":811,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"fn <'a, F> (&'a mut self, f: F) -> TakeWhileRef<'a, Self, F>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `f` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":27132,"byte_end":27142,"line_start":832,"line_end":832,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"fn <A> (self) -> WhileSome<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":27662,"byte_end":27674,"line_start":849,"line_end":849,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"fn (self) -> Combinations<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of\n the elements from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":28378,"byte_end":28392,"line_start":873,"line_end":873,"column_start":8,"column_end":22},"name":"combinations_n","qualname":"::Itertools::combinations_n","value":"fn (self, n: usize) -> CombinationsN<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the `n`-length combinations of\n the elements from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":29215,"byte_end":29224,"line_start":897,"line_end":897,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"fn <F> (self, min: usize, f: F) -> PadUsing<Self, F>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":29753,"byte_end":29760,"line_start":916,"line_end":916,"column_start":8,"column_end":15},"name":"flatten","qualname":"::Itertools::flatten","value":"fn (self) -> Flatten<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Unravel a nested iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":30648,"byte_end":30654,"line_start":942,"line_end":942,"column_start":8,"column_end":14},"name":"map_fn","qualname":"::Itertools::map_fn","value":"fn <B> (self, f: fn(Self::Item) -> B) -> MapFn<Self, B>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" **Deprecated:** Will be removed in the next version","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":31145,"byte_end":31158,"line_start":960,"line_end":960,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"fn <P> (&mut self, mut pred: P) -> Option<(usize, Self::Item)>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":31817,"byte_end":31822,"line_start":984,"line_end":984,"column_start":8,"column_end":13},"name":"dropn","qualname":"::Itertools::dropn","value":"fn (&mut self, mut n: usize) -> usize","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Consume the first `n` elements of the iterator eagerly.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":32669,"byte_end":32677,"line_start":1011,"line_end":1011,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":33370,"byte_end":33383,"line_start":1035,"line_end":1035,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":34073,"byte_end":34080,"line_start":1060,"line_end":1060,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"fn <F> (&mut self, mut f: F) -> ()","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":34314,"byte_end":34325,"line_start":1070,"line_end":1070,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" `.collect_vec()` is simply a type specialization of `.collect()`,\n for convenience.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":34942,"byte_end":34950,"line_start":1092,"line_end":1092,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"fn <'a, A, J> (&mut self, from: J) -> usize","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":34925,"byte_end":34934,"line_start":1091,"line_end":1091,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":35662,"byte_end":35666,"line_start":1117,"line_end":1117,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"fn (&mut self, sep: &str) -> String","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":36722,"byte_end":36736,"line_start":1149,"line_end":1149,"column_start":8,"column_end":22},"name":"format_default","qualname":"::Itertools::format_default","value":"fn (self, sep: &str) -> FormatDefault<Self>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":38129,"byte_end":38135,"line_start":1185,"line_end":1185,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"fn <F> (self, sep: &str, format: F) -> Format<Self, F>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":39852,"byte_end":39864,"line_start":1234,"line_end":1234,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"fn <A, E, B, F> (&mut self, mut start: B, mut f: F) -> Result<B, E>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":41021,"byte_end":41033,"line_start":1266,"line_end":1266,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"fn <A, B, F> (&mut self, mut start: B, mut f: F) -> Option<B>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":41833,"byte_end":41838,"line_start":1291,"line_end":1291,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"fn <F> (&mut self, mut f: F) -> Option<Self::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":43481,"byte_end":43491,"line_start":1344,"line_end":1344,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"fn <B, F> (self, init: B, mut f: F) -> B","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" An iterator adaptor that applies a function, producing a single, final value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":44448,"byte_end":44461,"line_start":1374,"line_end":1374,"column_start":8,"column_end":21},"name":"is_empty_hint","qualname":"::Itertools::is_empty_hint","value":"fn (&self) -> Option<bool>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Tell if the iterator is empty or not according to its size hint.\n Return `None` if the size hint does not tell, or return a `Some`\n value with the emptiness if it's possible to tell.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":45300,"byte_end":45306,"line_start":1403,"line_end":1403,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"fn (self) -> Vec<Self::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Collect all iterator elements into a sorted vector in ascending order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":46170,"byte_end":46179,"line_start":1430,"line_end":1430,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"fn <F> (self, cmp: F) -> Vec<Self::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Collect all iterator elements into a sorted vector.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":46548,"byte_end":46555,"line_start":1442,"line_end":1442,"column_start":8,"column_end":15},"name":"sort_by","qualname":"::Itertools::sort_by","value":"fn <F> (self, cmp: F) -> Vec<Self::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" **Deprecated:** renamed to `.sorted_by()`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":47444,"byte_end":47457,"line_start":1470,"line_end":1470,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"fn <A, B, F, L, R> (self, predicate: F) -> (A, B)","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike `Iterator::partition`, each partition may\n have a distinct type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":49162,"byte_end":49168,"line_start":1521,"line_end":1521,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"fn (self) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":49754,"byte_end":49767,"line_start":1535,"line_end":1535,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"fn <K, F> (self, key: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":50398,"byte_end":50407,"line_start":1549,"line_end":1549,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"fn <F> (self, mut compare: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1432},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":51120,"byte_end":51125,"line_start":1573,"line_end":1573,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"fn <I, J> (a: I, b: J) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterators produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1434},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":51953,"byte_end":51965,"line_start":1601,"line_end":1601,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"fn <I, J> (a: I, b: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterators produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1436},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":53192,"byte_end":53201,"line_start":1643,"line_end":1643,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"fn <'a, A, I, F> (iter: I, mut pred: F) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1091},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":54019,"byte_end":54023,"line_start":1671,"line_end":1671,"column_start":5,"column_end":9},"name":"Left","qualname":"::Partition::Left","value":"Partition::Left(L)","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":" Classify into the left partition.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1095},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":54075,"byte_end":54080,"line_start":1673,"line_end":1673,"column_start":5,"column_end":10},"name":"Right","qualname":"::Partition::Right","value":"Partition::Right(R)","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":" Classify into the right partition.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1438},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":53955,"byte_end":53964,"line_start":1669,"line_end":1669,"column_start":10,"column_end":19},"name":"Partition","qualname":"::Partition","value":"Partition::{Left, Right}","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1095}],"decl_id":null,"docs":" Classifies the result of the `.partition_map()` closure into a\n partition.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1101},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":54318,"byte_end":54326,"line_start":1682,"line_end":1682,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":1440},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1105},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":54387,"byte_end":54391,"line_start":1684,"line_end":1684,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":1440},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1440},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":54258,"byte_end":54267,"line_start":1680,"line_end":1680,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"FoldWhile::{Continue, Done}","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1105}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.\n \n See [`.fold_while()`](trait.Itertools.html#method.fold_while) for more information.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":55470,"byte_end":55480,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":55765,"byte_end":55775,"line_start":57,"line_end":57,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":56695,"byte_end":56713,"line_start":96,"line_end":96,"column_start":12,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":57030,"byte_end":57048,"line_start":110,"line_end":110,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":58817,"byte_end":58824,"line_start":171,"line_end":171,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":59669,"byte_end":59676,"line_start":208,"line_end":208,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":60360,"byte_end":60368,"line_start":235,"line_end":235,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":60986,"byte_end":60994,"line_start":264,"line_end":264,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":61378,"byte_end":61386,"line_start":281,"line_end":281,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":61948,"byte_end":61955,"line_start":306,"line_end":306,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":62353,"byte_end":62360,"line_start":325,"line_end":325,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":63928,"byte_end":63936,"line_start":377,"line_end":377,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":64109,"byte_end":64117,"line_start":384,"line_end":384,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":64850,"byte_end":64857,"line_start":415,"line_end":415,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":65145,"byte_end":65152,"line_start":429,"line_end":429,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":66754,"byte_end":66758,"line_start":483,"line_end":483,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":67054,"byte_end":67058,"line_start":498,"line_end":498,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":67656,"byte_end":67660,"line_start":525,"line_end":525,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":67876,"byte_end":67885,"line_start":540,"line_end":540,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":68117,"byte_end":68126,"line_start":551,"line_end":551,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":69552,"byte_end":69557,"line_start":600,"line_end":600,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":70078,"byte_end":70083,"line_start":625,"line_end":625,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":71166,"byte_end":71173,"line_start":670,"line_end":670,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":71441,"byte_end":71448,"line_start":682,"line_end":682,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":73587,"byte_end":73596,"line_start":765,"line_end":765,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":74432,"byte_end":74441,"line_start":796,"line_end":796,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":74869,"byte_end":74878,"line_start":816,"line_end":816,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":75036,"byte_end":75048,"line_start":828,"line_end":828,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":76205,"byte_end":76213,"line_start":869,"line_end":869,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":76367,"byte_end":76375,"line_start":878,"line_end":878,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":76674,"byte_end":76682,"line_start":893,"line_end":893,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":77238,"byte_end":77243,"line_start":917,"line_end":917,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":77385,"byte_end":77390,"line_start":926,"line_end":926,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":77653,"byte_end":77658,"line_start":940,"line_end":940,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":78255,"byte_end":78265,"line_start":966,"line_end":966,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":78412,"byte_end":78422,"line_start":975,"line_end":975,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":78695,"byte_end":78705,"line_start":989,"line_end":989,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":79297,"byte_end":79309,"line_start":1013,"line_end":1013,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":79554,"byte_end":79566,"line_start":1022,"line_end":1022,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":80452,"byte_end":80461,"line_start":1058,"line_end":1058,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":80604,"byte_end":80613,"line_start":1065,"line_end":1065,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":81267,"byte_end":81279,"line_start":1092,"line_end":1092,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":81569,"byte_end":81581,"line_start":1105,"line_end":1105,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":82944,"byte_end":82954,"line_start":1153,"line_end":1153,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":83890,"byte_end":83900,"line_start":1199,"line_end":1199,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":84398,"byte_end":84411,"line_start":1219,"line_end":1219,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":85011,"byte_end":85024,"line_start":1245,"line_end":1245,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":86807,"byte_end":86815,"line_start":1308,"line_end":1308,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":87121,"byte_end":87129,"line_start":1322,"line_end":1322,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":87812,"byte_end":87818,"line_start":1350,"line_end":1350,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":89319,"byte_end":89326,"line_start":1409,"line_end":1409,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":89608,"byte_end":89615,"line_start":1422,"line_end":1422,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":89838,"byte_end":89845,"line_start":1432,"line_end":1432,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":90033,"byte_end":90040,"line_start":1441,"line_end":1441,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":99692,"byte_end":99698,"line_start":49,"line_end":49,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":100335,"byte_end":100348,"line_start":70,"line_end":70,"column_start":13,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":101642,"byte_end":101643,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":101931,"byte_end":101941,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":102137,"byte_end":102147,"line_start":39,"line_end":39,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":103115,"byte_end":103125,"line_start":75,"line_end":75,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":109463,"byte_end":109473,"line_start":259,"line_end":259,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":111208,"byte_end":111219,"line_start":315,"line_end":315,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":652},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":112367,"byte_end":112373,"line_start":360,"line_end":360,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":113287,"byte_end":113292,"line_start":396,"line_end":396,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":113463,"byte_end":113468,"line_start":405,"line_end":405,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":115207,"byte_end":115217,"line_start":468,"line_end":468,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":116136,"byte_end":116142,"line_start":509,"line_end":509,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":116901,"byte_end":116906,"line_start":542,"line_end":542,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":117065,"byte_end":117070,"line_start":551,"line_end":551,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":117808,"byte_end":117819,"line_start":21,"line_end":21,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":118116,"byte_end":118127,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,115,108,105,99,101,46,114,115],"byte_start":119398,"byte_end":119404,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,115,108,105,99,101,46,114,115],"byte_start":119827,"byte_end":119833,"line_start":44,"line_end":44,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,115,108,105,99,101,46,114,115],"byte_start":120606,"byte_end":120612,"line_start":75,"line_end":75,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":123970,"byte_end":123978,"line_start":32,"line_end":32,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":124874,"byte_end":124882,"line_start":63,"line_end":63,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":125055,"byte_end":125063,"line_start":72,"line_end":72,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":125227,"byte_end":125235,"line_start":81,"line_end":81,"column_start":16,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":125311,"byte_end":125319,"line_start":86,"line_end":86,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":125836,"byte_end":125844,"line_start":111,"line_end":111,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":127692,"byte_end":127698,"line_start":176,"line_end":176,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":127867,"byte_end":127873,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,110,115,112,97,99,101,46,114,115],"byte_start":128783,"byte_end":128791,"line_start":15,"line_end":15,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,110,115,112,97,99,101,46,114,115],"byte_start":129385,"byte_end":129393,"line_start":40,"line_end":40,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,110,115,112,97,99,101,46,114,115],"byte_start":129833,"byte_end":129841,"line_start":57,"line_end":57,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":131119,"byte_end":131131,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":136095,"byte_end":136105,"line_start":67,"line_end":67,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":136269,"byte_end":136279,"line_start":75,"line_end":75,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":136626,"byte_end":136636,"line_start":90,"line_end":90,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137239,"byte_end":137248,"line_start":116,"line_end":116,"column_start":23,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137275,"byte_end":137284,"line_start":118,"line_end":118,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137389,"byte_end":137396,"line_start":124,"line_end":124,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137497,"byte_end":137502,"line_start":130,"line_end":130,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":940},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":140790,"byte_end":140798,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":141141,"byte_end":141149,"line_start":33,"line_end":33,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":141912,"byte_end":141920,"line_start":64,"line_end":64,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":142377,"byte_end":142385,"line_start":81,"line_end":81,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":142782,"byte_end":142788,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":142944,"byte_end":142950,"line_start":21,"line_end":21,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":143085,"byte_end":143091,"line_start":28,"line_end":28,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":143650,"byte_end":143656,"line_start":47,"line_end":47,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1048}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":144197,"byte_end":144204,"line_start":8,"line_end":8,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":144517,"byte_end":144524,"line_start":22,"line_end":22,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":144914,"byte_end":144921,"line_start":42,"line_end":42,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":145071,"byte_end":145078,"line_start":51,"line_end":51,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":145731,"byte_end":145741,"line_start":27,"line_end":27,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":145932,"byte_end":145942,"line_start":36,"line_end":36,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":146209,"byte_end":146219,"line_start":51,"line_end":51,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":147627,"byte_end":147633,"line_start":103,"line_end":103,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":148021,"byte_end":148027,"line_start":117,"line_end":117,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152151,"byte_end":152157,"line_start":31,"line_end":31,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152196,"byte_end":152202,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152255,"byte_end":152261,"line_start":33,"line_end":33,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152614,"byte_end":152623,"line_start":48,"line_end":48,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152676,"byte_end":152685,"line_start":49,"line_end":49,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152723,"byte_end":152729,"line_start":51,"line_end":51,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":153098,"byte_end":153107,"line_start":65,"line_end":65,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":160311,"byte_end":160317,"line_start":277,"line_end":277,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":160401,"byte_end":160410,"line_start":283,"line_end":283,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":160887,"byte_end":160896,"line_start":298,"line_end":298,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1186}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,116,101,101,46,114,115],"byte_start":162137,"byte_end":162140,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,116,101,101,46,114,115],"byte_start":163237,"byte_end":163240,"line_start":72,"line_end":72,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,101,113,46,114,115],"byte_start":163736,"byte_end":163741,"line_start":20,"line_end":20,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,101,113,46,114,115],"byte_start":164319,"byte_end":164324,"line_start":40,"line_end":40,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":165020,"byte_end":165030,"line_start":21,"line_end":21,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1254}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":165291,"byte_end":165301,"line_start":34,"line_end":34,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1260},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":165881,"byte_end":165891,"line_start":56,"line_end":56,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":166642,"byte_end":166652,"line_start":76,"line_end":76,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,116,117,112,108,101,46,114,115],"byte_start":168193,"byte_end":168196,"line_start":31,"line_end":31,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":171406,"byte_end":171415,"line_start":32,"line_end":32,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":171919,"byte_end":171928,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":172468,"byte_end":172477,"line_start":71,"line_end":71,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1300},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":173120,"byte_end":173129,"line_start":99,"line_end":99,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":173595,"byte_end":173604,"line_start":119,"line_end":119,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":173682,"byte_end":173691,"line_start":124,"line_end":124,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1312},{"krate":0,"index":1314},{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":50714,"byte_end":50715,"line_start":1560,"line_end":1560,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2917,"byte_end":2921,"line_start":98,"line_end":98,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":510}},{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3037,"byte_end":3041,"line_start":107,"line_end":107,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":876}},{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3103,"byte_end":3112,"line_start":112,"line_end":112,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1112}}],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":55470,"byte_end":55480,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":55765,"byte_end":55775,"line_start":57,"line_end":57,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":1442},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":56695,"byte_end":56713,"line_start":96,"line_end":96,"column_start":12,"column_end":30},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":1448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":57030,"byte_end":57048,"line_start":110,"line_end":110,"column_start":25,"column_end":43},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":1448},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":58817,"byte_end":58824,"line_start":171,"line_end":171,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":1454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":59669,"byte_end":59676,"line_start":208,"line_end":208,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":60360,"byte_end":60368,"line_start":235,"line_end":235,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":60986,"byte_end":60994,"line_start":264,"line_end":264,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":208},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":61378,"byte_end":61386,"line_start":281,"line_end":281,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":208},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":61948,"byte_end":61955,"line_start":306,"line_end":306,"column_start":12,"column_end":19},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":62353,"byte_end":62360,"line_start":325,"line_end":325,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1460},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":63928,"byte_end":63936,"line_start":377,"line_end":377,"column_start":12,"column_end":20},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":1466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":64109,"byte_end":64117,"line_start":384,"line_end":384,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":64850,"byte_end":64857,"line_start":415,"line_end":415,"column_start":15,"column_end":22},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1472},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":65145,"byte_end":65152,"line_start":429,"line_end":429,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1472},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":66754,"byte_end":66758,"line_start":483,"line_end":483,"column_start":9,"column_end":13},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":1478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":67054,"byte_end":67058,"line_start":498,"line_end":498,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":1478},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":67656,"byte_end":67660,"line_start":525,"line_end":525,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1478},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":67876,"byte_end":67885,"line_start":540,"line_end":540,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":278},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":68117,"byte_end":68126,"line_start":551,"line_end":551,"column_start":12,"column_end":21},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":69552,"byte_end":69557,"line_start":600,"line_end":600,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":290},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":70078,"byte_end":70083,"line_start":625,"line_end":625,"column_start":25,"column_end":30},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":290},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":71166,"byte_end":71173,"line_start":670,"line_end":670,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":306},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":71441,"byte_end":71448,"line_start":682,"line_end":682,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":306},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":73587,"byte_end":73596,"line_start":765,"line_end":765,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":74432,"byte_end":74441,"line_start":796,"line_end":796,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":74869,"byte_end":74878,"line_start":816,"line_end":816,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":75036,"byte_end":75048,"line_start":828,"line_end":828,"column_start":9,"column_end":21},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1490},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":76205,"byte_end":76213,"line_start":869,"line_end":869,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":344},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":76367,"byte_end":76375,"line_start":878,"line_end":878,"column_start":12,"column_end":20},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":76674,"byte_end":76682,"line_start":893,"line_end":893,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":344},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":77238,"byte_end":77243,"line_start":917,"line_end":917,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":362},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":77385,"byte_end":77390,"line_start":926,"line_end":926,"column_start":9,"column_end":14},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":77653,"byte_end":77658,"line_start":940,"line_end":940,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":362},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":78255,"byte_end":78265,"line_start":966,"line_end":966,"column_start":26,"column_end":36},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":380},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":78412,"byte_end":78422,"line_start":975,"line_end":975,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":78695,"byte_end":78705,"line_start":989,"line_end":989,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":380},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":79297,"byte_end":79309,"line_start":1013,"line_end":1013,"column_start":16,"column_end":28},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":79554,"byte_end":79566,"line_start":1022,"line_end":1022,"column_start":29,"column_end":41},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":398},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":80452,"byte_end":80461,"line_start":1058,"line_end":1058,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":1496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":80604,"byte_end":80613,"line_start":1065,"line_end":1065,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":1496},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":81267,"byte_end":81279,"line_start":1092,"line_end":1092,"column_start":9,"column_end":21},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":1502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":81569,"byte_end":81581,"line_start":1105,"line_end":1105,"column_start":22,"column_end":34},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":1502},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":82944,"byte_end":82954,"line_start":1153,"line_end":1153,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":83890,"byte_end":83900,"line_start":1199,"line_end":1199,"column_start":26,"column_end":36},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":436},"to":{"krate":2,"index":1988}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":84398,"byte_end":84411,"line_start":1219,"line_end":1219,"column_start":9,"column_end":22},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":85011,"byte_end":85024,"line_start":1245,"line_end":1245,"column_start":22,"column_end":35},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":454},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":86807,"byte_end":86815,"line_start":1308,"line_end":1308,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":1508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":87121,"byte_end":87129,"line_start":1322,"line_end":1322,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":87812,"byte_end":87818,"line_start":1350,"line_end":1350,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":1514},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":89319,"byte_end":89326,"line_start":1409,"line_end":1409,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":89608,"byte_end":89615,"line_start":1422,"line_end":1422,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":488},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":89838,"byte_end":89845,"line_start":1432,"line_end":1432,"column_start":33,"column_end":40},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":488},"to":{"krate":2,"index":4222}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,97,100,97,112,116,111,114,115,46,114,115],"byte_start":90033,"byte_end":90040,"line_start":1441,"line_end":1441,"column_start":19,"column_end":26},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":488},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":99692,"byte_end":99698,"line_start":49,"line_end":49,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":574},"to":{"krate":2,"index":7970}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,102,111,114,109,97,116,46,114,115],"byte_start":100335,"byte_end":100348,"line_start":70,"line_end":70,"column_start":13,"column_end":26},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":101642,"byte_end":101643,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":401},"to":{"krate":0,"index":600}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":101931,"byte_end":101941,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":102137,"byte_end":102147,"line_start":39,"line_end":39,"column_start":32,"column_end":42},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":612},"to":{"krate":0,"index":600}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":103115,"byte_end":103125,"line_start":75,"line_end":75,"column_start":15,"column_end":25},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":109463,"byte_end":109473,"line_start":259,"line_end":259,"column_start":15,"column_end":25},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":111208,"byte_end":111219,"line_start":315,"line_end":315,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":112367,"byte_end":112373,"line_start":360,"line_end":360,"column_start":32,"column_end":38},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":664},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":113287,"byte_end":113292,"line_start":396,"line_end":396,"column_start":28,"column_end":33},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":672},"to":{"krate":2,"index":1922}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":113463,"byte_end":113468,"line_start":405,"line_end":405,"column_start":32,"column_end":37},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":672},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":115207,"byte_end":115217,"line_start":468,"line_end":468,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":116136,"byte_end":116142,"line_start":509,"line_end":509,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":702},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":116901,"byte_end":116906,"line_start":542,"line_end":542,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":710},"to":{"krate":2,"index":1922}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,103,114,111,117,112,98,121,108,97,122,121,46,114,115],"byte_start":117065,"byte_end":117070,"line_start":551,"line_end":551,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":710},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":117808,"byte_end":117819,"line_start":21,"line_end":21,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":1562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":118116,"byte_end":118127,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":1562},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,115,108,105,99,101,46,114,115],"byte_start":119398,"byte_end":119404,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":1568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,115,108,105,99,101,46,114,115],"byte_start":119827,"byte_end":119833,"line_start":44,"line_end":44,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,105,115,108,105,99,101,46,114,115],"byte_start":120606,"byte_end":120612,"line_start":75,"line_end":75,"column_start":31,"column_end":37},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":123970,"byte_end":123978,"line_start":32,"line_end":32,"column_start":9,"column_end":17},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":124874,"byte_end":124882,"line_start":63,"line_end":63,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":782},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":125055,"byte_end":125063,"line_start":72,"line_end":72,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":782},"to":{"krate":2,"index":2328}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":125227,"byte_end":125235,"line_start":81,"line_end":81,"column_start":16,"column_end":24},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":782},"to":{"krate":2,"index":2334}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":125311,"byte_end":125319,"line_start":86,"line_end":86,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":782},"to":{"krate":2,"index":2382}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":125836,"byte_end":125844,"line_start":111,"line_end":111,"column_start":17,"column_end":25},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":782},"to":{"krate":2,"index":2364}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":127692,"byte_end":127698,"line_start":176,"line_end":176,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":822},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,107,109,101,114,103,101,46,114,115],"byte_start":127867,"byte_end":127873,"line_start":185,"line_end":185,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":822},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,110,115,112,97,99,101,46,114,115],"byte_start":128783,"byte_end":128791,"line_start":15,"line_end":15,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,110,115,112,97,99,101,46,114,115],"byte_start":129385,"byte_end":129393,"line_start":40,"line_end":40,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":4222}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,110,115,112,97,99,101,46,114,115],"byte_start":129833,"byte_end":129841,"line_start":57,"line_end":57,"column_start":31,"column_end":39},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,110,109,97,120,46,114,115],"byte_start":131119,"byte_end":131131,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1586},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":136095,"byte_end":136105,"line_start":67,"line_end":67,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":1676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":136269,"byte_end":136279,"line_start":75,"line_end":75,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":1676},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":136626,"byte_end":136636,"line_start":90,"line_end":90,"column_start":39,"column_end":49},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":1676},"to":{"krate":2,"index":4222}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137239,"byte_end":137248,"line_start":116,"line_end":116,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":2,"index":34826},"to":{"krate":0,"index":922}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137275,"byte_end":137284,"line_start":118,"line_end":118,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":2,"index":34866},"to":{"krate":0,"index":922}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137389,"byte_end":137396,"line_start":124,"line_end":124,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":2,"index":34886},"to":{"krate":0,"index":922}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137497,"byte_end":137502,"line_start":130,"line_end":130,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":2,"index":34846},"to":{"krate":0,"index":922}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,109,105,115,99,46,114,115],"byte_start":137732,"byte_end":137736,"line_start":140,"line_end":140,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1660},"to":{"krate":0,"index":944}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":140790,"byte_end":140798,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":1682},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":141141,"byte_end":141149,"line_start":33,"line_end":33,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":1682},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":141912,"byte_end":141920,"line_start":64,"line_end":64,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":1682},"to":{"krate":2,"index":4222}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,112,97,100,95,116,97,105,108,46,114,115],"byte_start":142377,"byte_end":142385,"line_start":81,"line_end":81,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":1682},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":142782,"byte_end":142788,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":1028},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":142944,"byte_end":142950,"line_start":21,"line_end":21,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":143085,"byte_end":143091,"line_start":28,"line_end":28,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,99,105,116,101,114,46,114,115],"byte_start":143650,"byte_end":143656,"line_start":47,"line_end":47,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":1028},"to":{"krate":2,"index":4222}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":144197,"byte_end":144204,"line_start":8,"line_end":8,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":1060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":144517,"byte_end":144524,"line_start":22,"line_end":22,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":144914,"byte_end":144921,"line_start":42,"line_end":42,"column_start":33,"column_end":40},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":4222}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,114,101,112,101,97,116,110,46,114,115],"byte_start":145071,"byte_end":145078,"line_start":51,"line_end":51,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":1060},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":145731,"byte_end":145741,"line_start":27,"line_end":27,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":1082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":145932,"byte_end":145942,"line_start":36,"line_end":36,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":1082},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":146209,"byte_end":146219,"line_start":51,"line_end":51,"column_start":36,"column_end":46},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":1082},"to":{"krate":2,"index":4222}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":147627,"byte_end":147633,"line_start":103,"line_end":103,"column_start":16,"column_end":22},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":1688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,111,117,114,99,101,115,46,114,115],"byte_start":148021,"byte_end":148027,"line_start":117,"line_end":117,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":1688},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152151,"byte_end":152157,"line_start":31,"line_end":31,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":1660}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152196,"byte_end":152202,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":1650}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152255,"byte_end":152261,"line_start":33,"line_end":33,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":1662}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152614,"byte_end":152623,"line_start":48,"line_end":48,"column_start":29,"column_end":38},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":1650}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152676,"byte_end":152685,"line_start":49,"line_end":49,"column_start":29,"column_end":38},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":1662}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":152723,"byte_end":152729,"line_start":51,"line_end":51,"column_start":13,"column_end":19},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":1150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":153098,"byte_end":153107,"line_start":65,"line_end":65,"column_start":13,"column_end":22},"kind":{"variant":"Impl","fields":[118]},"from":{"krate":0,"index":1158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":160311,"byte_end":160317,"line_start":277,"line_end":277,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[119]},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":2516}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":160401,"byte_end":160410,"line_start":283,"line_end":283,"column_start":13,"column_end":22},"kind":{"variant":"Impl","fields":[120]},"from":{"krate":0,"index":1158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,115,116,114,105,100,101,46,114,115],"byte_start":160887,"byte_end":160896,"line_start":298,"line_end":298,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[121]},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":1994}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,116,101,101,46,114,115],"byte_start":162137,"byte_end":162140,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"kind":{"variant":"Impl","fields":[122]},"from":{"krate":0,"index":1200},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,116,101,101,46,114,115],"byte_start":163237,"byte_end":163240,"line_start":72,"line_end":72,"column_start":31,"column_end":34},"kind":{"variant":"Impl","fields":[123]},"from":{"krate":0,"index":1200},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,101,113,46,114,115],"byte_start":163736,"byte_end":163741,"line_start":20,"line_end":20,"column_start":25,"column_end":30},"kind":{"variant":"Impl","fields":[124]},"from":{"krate":0,"index":1782},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,101,113,46,114,115],"byte_start":164319,"byte_end":164324,"line_start":40,"line_end":40,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[125]},"from":{"krate":0,"index":1782},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":165020,"byte_end":165030,"line_start":21,"line_end":21,"column_start":12,"column_end":22},"kind":{"variant":"Impl","fields":[126]},"from":{"krate":0,"index":1788},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":165291,"byte_end":165301,"line_start":34,"line_end":34,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[127]},"from":{"krate":0,"index":1788},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":165881,"byte_end":165891,"line_start":56,"line_end":56,"column_start":36,"column_end":46},"kind":{"variant":"Impl","fields":[128]},"from":{"krate":0,"index":1788},"to":{"krate":2,"index":4222}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":166642,"byte_end":166652,"line_start":76,"line_end":76,"column_start":34,"column_end":44},"kind":{"variant":"Impl","fields":[129]},"from":{"krate":0,"index":1788},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,116,117,112,108,101,46,114,115],"byte_start":168193,"byte_end":168196,"line_start":31,"line_end":31,"column_start":9,"column_end":12},"kind":{"variant":"Impl","fields":[130]},"from":{"krate":0,"index":1814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":171406,"byte_end":171415,"line_start":32,"line_end":32,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[131]},"from":{"krate":0,"index":1964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":171919,"byte_end":171928,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"kind":{"variant":"Impl","fields":[132]},"from":{"krate":0,"index":1964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":172468,"byte_end":172477,"line_start":71,"line_end":71,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[133]},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":3838}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":173120,"byte_end":173129,"line_start":99,"line_end":99,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[134]},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":4222}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":173595,"byte_end":173604,"line_start":119,"line_end":119,"column_start":34,"column_end":43},"kind":{"variant":"Impl","fields":[135]},"from":{"krate":0,"index":1964},"to":{"krate":2,"index":4236}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,122,105,112,115,108,105,99,101,115,46,114,115],"byte_start":173682,"byte_end":173691,"line_start":124,"line_end":124,"column_start":29,"column_end":38},"kind":{"variant":"Impl","fields":[136]},"from":{"krate":0,"index":1964},"to":{"krate":0,"index":972}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5880,"byte_end":5888,"line_start":206,"line_end":206,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3838},"to":{"krate":0,"index":1324}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,116,101,114,116,111,111,108,115,45,48,46,52,46,49,57,92,115,114,99,92,108,105,98,46,114,115],"byte_start":50714,"byte_end":50715,"line_start":1560,"line_end":1560,"column_start":31,"column_end":32},"kind":{"variant":"Impl","fields":[137]},"from":{"krate":0,"index":1069},"to":{"krate":0,"index":1324}}]}