{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49],"program":"C:\\Users\\Alan Ma\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","synstructure","C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","-C","metadata=12c807099e4c609c","-C","extra-filename=-12c807099e4c609c","--out-dir","d:\\Rust\\particle\\target\\rls\\debug\\deps","-L","dependency=d:\\Rust\\particle\\target\\rls\\debug\\deps","--extern","proc_macro2=d:\\Rust\\particle\\target\\rls\\debug\\deps\\libproc_macro2-c76cc842d2200db8.rlib","--extern","quote=d:\\Rust\\particle\\target\\rls\\debug\\deps\\libquote-a56ef3660df01450.rlib","--extern","syn=d:\\Rust\\particle\\target\\rls\\debug\\deps\\libsyn-940efdea63745a02.rlib","--extern","unicode_xid=d:\\Rust\\particle\\target\\rls\\debug\\deps\\libunicode_xid-bfb6ecb2def1b586.rlib","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Alan Ma\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":[100,58,92,82,117,115,116,92,112,97,114,116,105,99,108,101,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,115,121,110,115,116,114,117,99,116,117,114,101,45,49,50,99,56,48,55,48,57,57,101,52,99,54,48,57,99,46,114,108,105,98]},"prelude":{"crate_id":{"name":"synstructure","disambiguator":[11658165757878631029,10256462783797561339]},"crate_root":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src","external_crates":[{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2461050901580663130,13171115275296352452]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[8022629710910843829,13503404060310592223]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4339226960987119947,4220440642383456252]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[3893481107274575583,4860510609933999118]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[2100258045533171003,5822622357944671454]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[3400909174518281693,3018597966691292604]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14261940699245744681,16322901234827333825]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":8,"id":{"name":"panic_unwind","disambiguator":[3743022926293122458,13465831240801851205]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":9,"id":{"name":"proc_macro","disambiguator":[2670119849825794686,5814258530201339088]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":10,"id":{"name":"syntax","disambiguator":[159334131712191620,16013303728397798527]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":11,"id":{"name":"bitflags","disambiguator":[3563236025505069928,2284983447525596425]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":12,"id":{"name":"serialize","disambiguator":[4754472871595011730,12904170283785848599]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":13,"id":{"name":"smallvec","disambiguator":[5105049473953814105,6582398006178971950]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":14,"id":{"name":"unreachable","disambiguator":[40428827822724041,7929326351478773781]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":15,"id":{"name":"void","disambiguator":[761560277102729631,5462113120099707551]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":16,"id":{"name":"log","disambiguator":[1471974675555406508,5270282781488711576]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[9973239148483143268,11668979212780642010]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":18,"id":{"name":"rustc_errors","disambiguator":[16936304224275125687,5449071444303508015]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":19,"id":{"name":"atty","disambiguator":[17965742788153112909,16850399270562293605]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":20,"id":{"name":"winapi","disambiguator":[14873829308429684859,7333143069316201710]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":21,"id":{"name":"termcolor","disambiguator":[564177531553542830,1440981176006835099]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":22,"id":{"name":"wincolor","disambiguator":[12193037576279865829,13762411158898930383]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":23,"id":{"name":"winapi_util","disambiguator":[17146086123079217972,1901573682227637403]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":24,"id":{"name":"rustc_data_structures","disambiguator":[11549226023972603529,13300863646343134149]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":25,"id":{"name":"ena","disambiguator":[16220293908454340471,6453838549047064730]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":26,"id":{"name":"parking_lot","disambiguator":[17652335020479130119,1241290495436264856]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":27,"id":{"name":"lock_api","disambiguator":[16998804545520696777,10038464291742427106]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":28,"id":{"name":"scopeguard","disambiguator":[8644810776163763949,2185610442265671537]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":29,"id":{"name":"owning_ref","disambiguator":[13500908132214085459,11334402661347588363]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":30,"id":{"name":"stable_deref_trait","disambiguator":[13755995574975434557,11850585507741837354]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":31,"id":{"name":"parking_lot_core","disambiguator":[11465040934170689796,3470120273723688357]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":32,"id":{"name":"rand","disambiguator":[9582970528533351931,17745754839504863505]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":33,"id":{"name":"rand_core","disambiguator":[207226270692108181,7090702858752123647]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":34,"id":{"name":"rustc_rayon","disambiguator":[9196851164421879677,3392704445318784855]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":35,"id":{"name":"rustc_rayon_core","disambiguator":[8430938823503465819,1172282244060793770]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":36,"id":{"name":"crossbeam_deque","disambiguator":[10028629851855286086,4990020060659405651]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":37,"id":{"name":"crossbeam_epoch","disambiguator":[5209840112734462410,9391148412390660925]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":38,"id":{"name":"nodrop","disambiguator":[17979783392650752167,7337946991603756137]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":39,"id":{"name":"arrayvec","disambiguator":[15477592711322133453,2879824530750093112]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":40,"id":{"name":"crossbeam_utils","disambiguator":[776399938367133497,4660580890224654307]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":41,"id":{"name":"lazy_static","disambiguator":[4115293057267041143,14998854775566821642]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":42,"id":{"name":"memoffset","disambiguator":[13641658521579954489,1113334801305287282]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":43,"id":{"name":"libc","disambiguator":[8459753153053219635,4494724725073359129]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":44,"id":{"name":"num_cpus","disambiguator":[7092773038273930400,11602202548364106154]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":45,"id":{"name":"rand","disambiguator":[6263295912782824668,14274845084952008211]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":46,"id":{"name":"either","disambiguator":[9031921801947388040,7302496684186967311]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":47,"id":{"name":"rustc_hash","disambiguator":[12817759197385449073,1187399796286744670]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":48,"id":{"name":"byteorder","disambiguator":[1894367734688760703,3677768761709262923]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":49,"id":{"name":"graphviz","disambiguator":[11114007658493832404,7841387929172211462]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":50,"id":{"name":"rustc_cratesio_shim","disambiguator":[4278477435325202490,8735942117273294369]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":51,"id":{"name":"unicode_width","disambiguator":[11407211055269975735,11421405944976317972]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":52,"id":{"name":"syntax_pos","disambiguator":[14290294470416961550,10395581977052506340]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":53,"id":{"name":"arena","disambiguator":[2071433690934780320,13877989528277331730]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":54,"id":{"name":"scoped_tls","disambiguator":[10868726194151154513,3143549746221056292]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":55,"id":{"name":"rustc_target","disambiguator":[4661397135161742853,4634093665817771018]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":56,"id":{"name":"proc_macro2","disambiguator":[4265004257472196389,16101142662250603039]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":57,"id":{"name":"unicode_xid","disambiguator":[1030476220208705645,5439377085922758797]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":58,"id":{"name":"quote","disambiguator":[10928233837684918951,14823567335742169176]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","num":59,"id":{"name":"syn","disambiguator":[157716046421258058,11278229162681832572]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":74693,"line_start":1,"line_end":2283,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5855,"byte_end":5856,"line_start":183,"line_end":183,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"quote_spanned, ToTokens, quote","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":59,"index":3550},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,109,97,99,114,111,115,46,114,115],"byte_start":74978,"byte_end":74987,"line_start":6,"line_end":6,"column_start":15,"column_end":24},"alias_span":null,"name":"parse_str","value":"","parent":{"krate":0,"index":80}},{"kind":"Use","ref_id":{"krate":59,"index":3182},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,109,97,99,114,111,115,46,114,115],"byte_start":74989,"byte_end":74994,"line_start":6,"line_end":6,"column_start":26,"column_end":31},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":80}},{"kind":"Use","ref_id":{"krate":59,"index":10544},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,109,97,99,114,111,115,46,114,115],"byte_start":74996,"byte_end":75007,"line_start":6,"line_end":6,"column_start":33,"column_end":44},"alias_span":null,"name":"DeriveInput","value":"","parent":{"krate":0,"index":80}},{"kind":"Use","ref_id":{"krate":9,"index":632},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,109,97,99,114,111,115,46,114,115],"byte_start":75030,"byte_end":75041,"line_start":7,"line_end":7,"column_start":21,"column_end":32},"alias_span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,109,97,99,114,111,115,46,114,115],"byte_start":75045,"byte_end":75056,"line_start":7,"line_end":7,"column_start":36,"column_end":47},"name":"TokenStream","value":"","parent":{"krate":0,"index":80}},{"kind":"Use","ref_id":{"krate":56,"index":1120},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,109,97,99,114,111,115,46,114,115],"byte_start":75079,"byte_end":75090,"line_start":8,"line_end":8,"column_start":22,"column_end":33},"alias_span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,109,97,99,114,111,115,46,114,115],"byte_start":75094,"byte_end":75106,"line_start":8,"line_end":8,"column_start":37,"column_end":49},"name":"TokenStream2","value":"","parent":{"krate":0,"index":80}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":74693,"line_start":1,"line_end":2283,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":62},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":226},{"krate":0,"index":246},{"krate":0,"index":244},{"krate":0,"index":240},{"krate":0,"index":236},{"krate":0,"index":232},{"krate":0,"index":228},{"krate":0,"index":250},{"krate":0,"index":270},{"krate":0,"index":268},{"krate":0,"index":264},{"krate":0,"index":260},{"krate":0,"index":256},{"krate":0,"index":252},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":274},{"krate":0,"index":294},{"krate":0,"index":290},{"krate":0,"index":284},{"krate":0,"index":280},{"krate":0,"index":276},{"krate":0,"index":110},{"krate":0,"index":114},{"krate":0,"index":298},{"krate":0,"index":320},{"krate":0,"index":318},{"krate":0,"index":314},{"krate":0,"index":308},{"krate":0,"index":304},{"krate":0,"index":300},{"krate":0,"index":324},{"krate":0,"index":344},{"krate":0,"index":340},{"krate":0,"index":334},{"krate":0,"index":330},{"krate":0,"index":326},{"krate":0,"index":122},{"krate":0,"index":132},{"krate":0,"index":348},{"krate":0,"index":368},{"krate":0,"index":364},{"krate":0,"index":358},{"krate":0,"index":354},{"krate":0,"index":350},{"krate":0,"index":162},{"krate":0,"index":224}],"decl_id":null,"docs":" This crate provides helper types for matching against enum variants, and\n extracting bindings to each of the fields in the deriving Struct or Enum in\n a generic way.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":80},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,109,97,99,114,111,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\synstructure-0.10.1\\src\\macros.rs","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96}],"decl_id":null,"docs":" This module provides two utility macros for testing custom derives. They can\n be used together to eliminate some of the boilerplate required in order to\n declare and test custom derive implementations.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":125},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6335,"byte_end":6339,"line_start":200,"line_end":200,"column_start":5,"column_end":9},"name":"Both","qualname":"::AddBounds::Both","value":"AddBounds::Both","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Add for fields and generics\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":127},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6365,"byte_end":6371,"line_start":202,"line_end":202,"column_start":5,"column_end":11},"name":"Fields","qualname":"::AddBounds::Fields","value":"AddBounds::Fields","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Fields only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":129},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6399,"byte_end":6407,"line_start":204,"line_end":204,"column_start":5,"column_end":13},"name":"Generics","qualname":"::AddBounds::Generics","value":"AddBounds::Generics","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" Generics only\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":131},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6426,"byte_end":6430,"line_start":206,"line_end":206,"column_start":5,"column_end":9},"name":"None","qualname":"::AddBounds::None","value":"AddBounds::None","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":" None\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":133},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6455,"byte_end":6470,"line_start":208,"line_end":208,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::AddBounds::__Nonexhaustive","value":"AddBounds::__Nonexhaustive","parent":{"krate":0,"index":226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":226},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6283,"byte_end":6292,"line_start":198,"line_end":198,"column_start":10,"column_end":19},"name":"AddBounds","qualname":"::AddBounds","value":"AddBounds::{Both, Fields, Generics, None, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":133}],"decl_id":null,"docs":" Changes how bounds are added\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6274,"byte_end":6473,"line_start":198,"line_end":209,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6274,"byte_end":6473,"line_start":198,"line_end":209,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":137},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6621,"byte_end":6625,"line_start":215,"line_end":215,"column_start":5,"column_end":9},"name":"Move","qualname":"::BindStyle::Move","value":"BindStyle::Move","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":139},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6647,"byte_end":6654,"line_start":217,"line_end":217,"column_start":5,"column_end":12},"name":"MoveMut","qualname":"::BindStyle::MoveMut","value":"BindStyle::MoveMut","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" `mut x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":141},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6676,"byte_end":6679,"line_start":219,"line_end":219,"column_start":5,"column_end":8},"name":"Ref","qualname":"::BindStyle::Ref","value":"BindStyle::Ref","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" `ref x`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":143},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6705,"byte_end":6711,"line_start":221,"line_end":221,"column_start":5,"column_end":11},"name":"RefMut","qualname":"::BindStyle::RefMut","value":"BindStyle::RefMut","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" `ref mut x`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":250},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6593,"byte_end":6602,"line_start":213,"line_end":213,"column_start":10,"column_end":19},"name":"BindStyle","qualname":"::BindStyle","value":"BindStyle::{Move, MoveMut, Ref, RefMut}","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143}],"decl_id":null,"docs":" The type of binding to use when generating a pattern.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6584,"byte_end":6714,"line_start":213,"line_end":222,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6584,"byte_end":6714,"line_start":213,"line_end":222,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10191,"byte_end":10202,"line_start":313,"line_end":313,"column_start":12,"column_end":23},"name":"BindingInfo","qualname":"::BindingInfo","value":"BindingInfo { binding, style }","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157}],"decl_id":null,"docs":" Information about a specific binding. This contains both an `Ident`\n reference to the given field, and the syn `&'a Field` descriptor for that\n field.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10180,"byte_end":10533,"line_start":313,"line_end":325,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":149},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10271,"byte_end":10278,"line_start":315,"line_end":315,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindingInfo::binding","value":"proc_macro2::Ident","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The name which this BindingInfo will bind to.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":151},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10360,"byte_end":10365,"line_start":318,"line_end":318,"column_start":9,"column_end":14},"name":"style","qualname":"::BindingInfo::style","value":"BindStyle","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The type of binding which this BindingInfo will create.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10819,"byte_end":10822,"line_start":336,"line_end":336,"column_start":12,"column_end":15},"name":"ast","qualname":"<BindingInfo<'a>>::ast","value":"fn (&self) -> &'a Field","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `BindingInfo` references\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":11554,"byte_end":11557,"line_start":365,"line_end":365,"column_start":12,"column_end":15},"name":"pat","qualname":"<BindingInfo<'a>>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the pattern fragment for this field binding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":12715,"byte_end":12735,"line_start":405,"line_end":405,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<BindingInfo<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":298},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13197,"byte_end":13207,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"name":"VariantAst","qualname":"::VariantAst","value":"VariantAst { attrs, ident, fields, discriminant }","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179}],"decl_id":null,"docs":" This type is similar to `syn`'s `Variant` type, however each of the fields\n are references rather than owned. When this is used as the AST for a real\n variant, this struct simply borrows the fields of the `syn::Variant`,\n however this type may also be used as the sole variant for a struct.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13186,"byte_end":13354,"line_start":415,"line_end":420,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13186,"byte_end":13354,"line_start":415,"line_end":420,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":173},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13222,"byte_end":13227,"line_start":416,"line_end":416,"column_start":9,"column_end":14},"name":"attrs","qualname":"::VariantAst::attrs","value":"&'a [syn::Attribute]","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":175},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13254,"byte_end":13259,"line_start":417,"line_end":417,"column_start":9,"column_end":14},"name":"ident","qualname":"::VariantAst::ident","value":"&'a proc_macro2::Ident","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":177},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13280,"byte_end":13286,"line_start":418,"line_end":418,"column_start":9,"column_end":15},"name":"fields","qualname":"::VariantAst::fields","value":"&'a syn::Fields","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":179},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13308,"byte_end":13320,"line_start":419,"line_end":419,"column_start":9,"column_end":21},"name":"discriminant","qualname":"::VariantAst::discriminant","value":"&'a std::option::Option<(syn::token::Eq, syn::Expr)>","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":324},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13548,"byte_end":13559,"line_start":425,"line_end":425,"column_start":12,"column_end":23},"name":"VariantInfo","qualname":"::VariantInfo","value":"VariantInfo { prefix }","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput`'s variant which provides utilities\n for destructuring `Variant`s with `match` expressions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13537,"byte_end":13717,"line_start":425,"line_end":431,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":197},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13574,"byte_end":13580,"line_start":426,"line_end":426,"column_start":9,"column_end":15},"name":"prefix","qualname":"::VariantInfo::prefix","value":"std::option::Option<&'a proc_macro2::Ident>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16638,"byte_end":16646,"line_start":513,"line_end":513,"column_start":12,"column_end":20},"name":"bindings","qualname":"<VariantInfo<'a>>::bindings","value":"fn (&self) -> &[BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16780,"byte_end":16792,"line_start":518,"line_end":518,"column_start":12,"column_end":24},"name":"bindings_mut","qualname":"<VariantInfo<'a>>::bindings_mut","value":"fn (&mut self) -> &mut [BindingInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the bindings in this Variant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17021,"byte_end":17024,"line_start":524,"line_end":524,"column_start":12,"column_end":15},"name":"ast","qualname":"<VariantInfo<'a>>::ast","value":"fn (&self) -> VariantAst<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `VariantAst` object which contains references to the\n underlying `syn` AST node which this `Variant` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17153,"byte_end":17169,"line_start":529,"line_end":529,"column_start":12,"column_end":28},"name":"omitted_bindings","qualname":"<VariantInfo<'a>>::omitted_bindings","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any bindings were omitted due to a `filter` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17934,"byte_end":17937,"line_start":558,"line_end":558,"column_start":12,"column_end":15},"name":"pat","qualname":"<VariantInfo<'a>>::pat","value":"fn (&self) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the match-arm pattern which could be used to match against this Variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20347,"byte_end":20356,"line_start":634,"line_end":634,"column_start":12,"column_end":21},"name":"construct","qualname":"<VariantInfo<'a>>::construct","value":"fn <F, T> (&self, mut func: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generates the token stream required to construct the current variant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":22622,"byte_end":22626,"line_start":702,"line_end":702,"column_start":12,"column_end":16},"name":"each","qualname":"<VariantInfo<'a>>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating a `match` arm which evaluates the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":24082,"byte_end":24086,"line_start":750,"line_end":750,"column_start":12,"column_end":16},"name":"fold","qualname":"<VariantInfo<'a>>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating a `match`\n arm which evaluates to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":25899,"byte_end":25905,"line_start":807,"line_end":807,"column_start":12,"column_end":18},"name":"filter","qualname":"<VariantInfo<'a>>::filter","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Variant` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":26327,"byte_end":26341,"line_start":824,"line_end":824,"column_start":12,"column_end":26},"name":"remove_binding","qualname":"<VariantInfo<'a>>::remove_binding","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the binding at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":27582,"byte_end":27591,"line_start":865,"line_end":865,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<VariantInfo<'a>>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":29133,"byte_end":29145,"line_start":916,"line_end":916,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<VariantInfo<'a>>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":30377,"byte_end":30397,"line_start":957,"line_end":957,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<VariantInfo<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are referenced in this\n field's type.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":348},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":30806,"byte_end":30815,"line_start":969,"line_end":969,"column_start":12,"column_end":21},"name":"Structure","qualname":"::Structure","value":"Structure {  }","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":229}],"decl_id":null,"docs":" A wrapper around a `syn::DeriveInput` which provides utilities for creating\n custom derive trait implementations.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":30795,"byte_end":30975,"line_start":969,"line_end":975,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":31117,"byte_end":31120,"line_start":980,"line_end":980,"column_start":12,"column_end":15},"name":"new","qualname":"<Structure<'a>>::new","value":"fn (ast: &'a DeriveInput) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Structure` with the variants and fields from the passed-in\n `DeriveInput`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":33344,"byte_end":33352,"line_start":1037,"line_end":1037,"column_start":12,"column_end":20},"name":"variants","qualname":"<Structure<'a>>::variants","value":"fn (&self) -> &[VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":33488,"byte_end":33500,"line_start":1042,"line_end":1042,"column_start":12,"column_end":24},"name":"variants_mut","qualname":"<Structure<'a>>::variants_mut","value":"fn (&mut self) -> &mut [VariantInfo<'a>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mut slice of the variants in this Structure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":33695,"byte_end":33698,"line_start":1048,"line_end":1048,"column_start":12,"column_end":15},"name":"ast","qualname":"<Structure<'a>>::ast","value":"fn (&self) -> &'a DeriveInput","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `syn` AST node which this\n `Structure` was created from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":33837,"byte_end":33853,"line_start":1053,"line_end":1053,"column_start":12,"column_end":28},"name":"omitted_variants","qualname":"<Structure<'a>>::omitted_variants","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if any variants were omitted due to a `filter_variants` call.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":35104,"byte_end":35108,"line_start":1093,"line_end":1093,"column_start":12,"column_end":16},"name":"each","qualname":"<Structure<'a>>::each","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in a `BindingInfo`.\n and generating `match` arms which evaluate the returned tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":36722,"byte_end":36726,"line_start":1146,"line_end":1146,"column_start":12,"column_end":16},"name":"fold","qualname":"<Structure<'a>>::fold","value":"fn <F, I, R> (&self, init: I, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each bound field, passing in the\n result of the previous call, and a `BindingInfo`. generating `match`\n arms which evaluate to the resulting tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":38374,"byte_end":38386,"line_start":1201,"line_end":1201,"column_start":12,"column_end":24},"name":"each_variant","qualname":"<Structure<'a>>::each_variant","value":"fn <F, R> (&self, mut f: F) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Runs the passed-in function once for each variant, passing in a\n `VariantInfo`. and generating `match` arms which evaluate the returned\n tokens.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":40261,"byte_end":40267,"line_start":1261,"line_end":1261,"column_start":12,"column_end":18},"name":"filter","qualname":"<Structure<'a>>::filter","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the bindings created by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":41849,"byte_end":41859,"line_start":1314,"line_end":1314,"column_start":12,"column_end":22},"name":"add_bounds","qualname":"<Structure<'a>>::add_bounds","value":"fn (&mut self, mode: AddBounds) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Specify which bounds should be generated by impl-generating functions\n such as `gen_impl`, `bound_impl`, and `unsafe_bound_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":43172,"byte_end":43187,"line_start":1358,"line_end":1358,"column_start":12,"column_end":27},"name":"filter_variants","qualname":"<Structure<'a>>::filter_variants","value":"fn <F> (&mut self, f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Filter the variants matched by this `Structure` object. This has 2 effects:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":43611,"byte_end":43625,"line_start":1375,"line_end":1375,"column_start":12,"column_end":26},"name":"remove_variant","qualname":"<Structure<'a>>::remove_variant","value":"fn (&mut self, idx: usize) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Remove the variant at the given index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":44854,"byte_end":44863,"line_start":1416,"line_end":1416,"column_start":12,"column_end":21},"name":"bind_with","qualname":"<Structure<'a>>::bind_with","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the `BindStyle` for each of the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":46365,"byte_end":46377,"line_start":1467,"line_end":1467,"column_start":12,"column_end":24},"name":"binding_name","qualname":"<Structure<'a>>::binding_name","value":"fn <F> (&mut self, mut f: F) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Updates the binding name for each fo the passed-in fields by calling the\n passed-in function for each `BindingInfo`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":47637,"byte_end":47657,"line_start":1510,"line_end":1510,"column_start":12,"column_end":32},"name":"referenced_ty_params","qualname":"<Structure<'a>>::referenced_ty_params","value":"fn (&self) -> Vec<&'a Ident>","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of the type parameters which are refrenced in the types\n of non-filtered fields / variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":49420,"byte_end":49436,"line_start":1563,"line_end":1563,"column_start":12,"column_end":28},"name":"add_impl_generic","qualname":"<Structure<'a>>::add_impl_generic","value":"fn (&mut self, param: GenericParam) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an `impl<>` generic parameter.\n This can be used when the trait to be derived needs some extra generic parameters.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":49923,"byte_end":49939,"line_start":1576,"line_end":1576,"column_start":12,"column_end":28},"name":"add_trait_bounds","qualname":"<Structure<'a>>::add_trait_bounds","value":"fn (&self, bound: &TraitBound, where_clause: &mut Option<WhereClause>, mode: AddBounds) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add trait bounds for a trait with the given path for each type parmaeter\n referenced in the types of non-filtered fields.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":54463,"byte_end":54473,"line_start":1702,"line_end":1702,"column_start":12,"column_end":22},"name":"bound_impl","qualname":"<Structure<'a>>::bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":57066,"byte_end":57083,"line_start":1776,"line_end":1776,"column_start":12,"column_end":29},"name":"unsafe_bound_impl","qualname":"<Structure<'a>>::unsafe_bound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":59235,"byte_end":59247,"line_start":1840,"line_end":1840,"column_start":12,"column_end":24},"name":"unbound_impl","qualname":"<Structure<'a>>::unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":61449,"byte_end":61468,"line_start":1905,"line_end":1905,"column_start":12,"column_end":31},"name":"unsafe_unbound_impl","qualname":"<Structure<'a>>::unsafe_unbound_impl","value":"fn <P, B> (&self, path: P, body: B) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" > NOTE: This methods' features are superceded by `Structure::gen_impl`.","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":61424,"byte_end":61437,"line_start":1904,"line_end":1904,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":69766,"byte_end":69774,"line_start":2130,"line_end":2130,"column_start":12,"column_end":20},"name":"gen_impl","qualname":"<Structure<'a>>::gen_impl","value":"fn (&self, cfg: TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Generate an impl block for the given struct. This impl block will\n automatically use hygiene tricks to avoid polluting the caller's\n namespace, and will automatically add trait bounds for generic type\n parameters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":74082,"byte_end":74096,"line_start":2262,"line_end":2262,"column_start":8,"column_end":22},"name":"unpretty_print","qualname":"::unpretty_print","value":"fn <T> (ts: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Dumps an unpretty version of a tokenstream. Takes any type which implements\n `Display`.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6734,"byte_end":6743,"line_start":224,"line_end":224,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10557,"byte_end":10568,"line_start":327,"line_end":327,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10685,"byte_end":10696,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14224,"byte_end":14240,"line_start":444,"line_end":444,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15237,"byte_end":15248,"line_start":477,"line_end":477,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":30986,"byte_end":30995,"line_start":977,"line_end":977,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":32315,"byte_end":32329,"line_start":1005,"line_end":1005,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6181,"byte_end":6187,"line_start":194,"line_end":194,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":80}}],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6734,"byte_end":6743,"line_start":224,"line_end":224,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":250},"to":{"krate":58,"index":76}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10557,"byte_end":10568,"line_start":327,"line_end":327,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":274},"to":{"krate":58,"index":76}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10685,"byte_end":10696,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14224,"byte_end":14240,"line_start":444,"line_end":444,"column_start":28,"column_end":44},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":124},"to":{"krate":59,"index":2636}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15237,"byte_end":15248,"line_start":477,"line_end":477,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":30986,"byte_end":30995,"line_start":977,"line_end":977,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,115,121,110,115,116,114,117,99,116,117,114,101,45,48,46,49,48,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":32315,"byte_end":32329,"line_start":1005,"line_end":1005,"column_start":38,"column_end":52},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":166},"to":{"krate":2,"index":1662}}]}