{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48],"program":"C:\\Users\\Alan Ma\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","multimap","C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"serde\"","--cfg","feature=\"serde_impl\"","-C","metadata=d274321c1ff51c9f","-C","extra-filename=-d274321c1ff51c9f","--out-dir","D:\\Rust\\particle\\target\\rls\\debug\\deps","-L","dependency=D:\\Rust\\particle\\target\\rls\\debug\\deps","--extern","serde=D:\\Rust\\particle\\target\\rls\\debug\\deps\\libserde-4804ed5a91a53b47.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Alan Ma\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":[68,58,92,82,117,115,116,92,112,97,114,116,105,99,108,101,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,109,117,108,116,105,109,97,112,45,100,50,55,52,51,50,49,99,49,102,102,53,49,99,57,102,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"multimap","disambiguator":[17362037585452688133,1053855889664666884]},"crate_root":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src","external_crates":[{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[6681901594536212158,6438033458057891428]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[10048650649318253979,7791778583244841502]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3926059153017116944,17604108203550115566]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11586296189252832025,1309985648897884395]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6217719639537231419,7723728028856146679]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2264972670008051219,16605527201299071112]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[6427325928529397449,1916651756662993897]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","num":8,"id":{"name":"unwind","disambiguator":[2592582825225427513,6676485469543519511]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[3301257304651142400,5164950928678414298]}},{"file_name":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\serde.rs","num":10,"id":{"name":"serde","disambiguator":[14181968956428745737,4021140719108470148]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":390,"byte_end":30967,"line_start":9,"line_end":1154,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":1452},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2717,"byte_end":2721,"line_start":74,"line_end":74,"column_start":37,"column_end":41},"alias_span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2725,"byte_end":2732,"line_start":74,"line_end":74,"column_start":45,"column_end":52},"name":"IterAll","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":1462},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2771,"byte_end":2778,"line_start":75,"line_end":75,"column_start":37,"column_end":44},"alias_span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2782,"byte_end":2792,"line_start":75,"line_end":75,"column_start":48,"column_end":58},"name":"IterAllMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":56},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2813,"byte_end":2818,"line_start":77,"line_end":77,"column_start":17,"column_end":22},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":52},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2820,"byte_end":2833,"line_start":77,"line_end":77,"column_start":24,"column_end":37},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2835,"byte_end":2846,"line_start":77,"line_end":77,"column_start":39,"column_end":50},"alias_span":null,"name":"VacantEntry","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":390,"byte_end":30967,"line_start":9,"line_end":1154,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":46},{"krate":0,"index":90},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":140},{"krate":0,"index":182},{"krate":0,"index":188},{"krate":0,"index":192},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":206},{"krate":0,"index":214},{"krate":0,"index":222},{"krate":0,"index":230},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":242},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":246},{"krate":0,"index":254},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":268},{"krate":0,"index":272}],"decl_id":null,"docs":" A MultiMap implementation which is just a wrapper around std::collections::HashMap.\n See HashMap's documentation for more details.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":52},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":31574,"byte_end":31587,"line_start":13,"line_end":13,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::entry::OccupiedEntry","value":"OccupiedEntry { inner }","parent":null,"children":[{"krate":0,"index":25}],"decl_id":null,"docs":" A view into a single occupied location in a MultiMap.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":25},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":31637,"byte_end":31642,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"inner","qualname":"::entry::OccupiedEntry::inner","value":"std::collections::hash_map::OccupiedEntry<'a, K, std::vec::Vec<V>>","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":54},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":31754,"byte_end":31765,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::entry::VacantEntry","value":"VacantEntry { inner }","parent":null,"children":[{"krate":0,"index":33}],"decl_id":null,"docs":" A view into a single empty location in a MultiMap.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":33},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":31815,"byte_end":31820,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"name":"inner","qualname":"::entry::VacantEntry::inner","value":"std::collections::hash_map::VacantEntry<'a, K, std::vec::Vec<V>>","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":41},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":32009,"byte_end":32017,"line_start":27,"line_end":27,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::entry::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V>)","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" An occupied Entry.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":45},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":32076,"byte_end":32082,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::entry::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V>)","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":" A vacant Entry.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":56},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":31950,"byte_end":31955,"line_start":25,"line_end":25,"column_start":10,"column_end":15},"name":"Entry","qualname":"::entry::Entry","value":"Entry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":45}],"decl_id":null,"docs":" A view into a single location in a map, which may be vacant or occupied.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":32265,"byte_end":32268,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry<'a, K, V>>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the first item in value in the vector corresponding to entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":32408,"byte_end":32415,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"get_vec","qualname":"<OccupiedEntry<'a, K, V>>::get_vec","value":"fn (&self) -> &Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the values (vector) corresponding to entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":32578,"byte_end":32585,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry<'a, K, V>>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mut reference to the first item in value in the vector corresponding to entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":32745,"byte_end":32756,"line_start":50,"line_end":50,"column_start":12,"column_end":23},"name":"get_vec_mut","qualname":"<OccupiedEntry<'a, K, V>>::get_vec_mut","value":"fn (&mut self) -> &mut Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mut reference to the values (vector) corresponding to entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":32986,"byte_end":32994,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry<'a, K, V>>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the first item in value in the entry\n with a lifetime bound to the map itself\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":33222,"byte_end":33234,"line_start":62,"line_end":62,"column_start":12,"column_end":24},"name":"into_vec_mut","qualname":"<OccupiedEntry<'a, K, V>>::into_vec_mut","value":"fn (self) -> &'a mut Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the values (vector) in the entry\n with a lifetime bound to the map itself\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":33372,"byte_end":33378,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry<'a, K, V>>::insert","value":"fn (&mut self, value: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new value onto the vector of the entry.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":33528,"byte_end":33538,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"insert_vec","qualname":"<OccupiedEntry<'a, K, V>>::insert_vec","value":"fn (&mut self, values: Vec<V>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extends the existing vector with the specified values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":33701,"byte_end":33707,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry<'a, K, V>>::remove","value":"fn (self) -> Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Takes the values (vector) out of the entry, and returns it\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":33960,"byte_end":33966,"line_start":85,"line_end":85,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry<'a, K, V>>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the first value in the vector of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":34177,"byte_end":34187,"line_start":91,"line_end":91,"column_start":12,"column_end":22},"name":"insert_vec","qualname":"<VacantEntry<'a, K, V>>::insert_vec","value":"fn (self, values: Vec<V>) -> &'a mut Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Sets values in the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":34592,"byte_end":34601,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry<'a, K, V>>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry. This will return a mutable reference to the\n first value in the vector corresponding to the specified key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":35015,"byte_end":35028,"line_start":111,"line_end":111,"column_start":12,"column_end":25},"name":"or_insert_vec","qualname":"<Entry<'a, K, V>>::or_insert_vec","value":"fn (self, defaults: Vec<V>) -> &'a mut Vec<V>","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default values if empty, and returns\n a mutable reference to the values (the corresponding vector to the specified key) in\n the entry.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":90},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,115,101,114,100,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serde","qualname":"::serde","value":"C:\\Users\\Alan Ma\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\multimap-0.4.0\\src\\serde.rs","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":110},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":136}],"decl_id":null,"docs":" Serde trait implementations for MultiMap\n","sig":null,"attributes":[{"value":"cfg(feature = \"serde_impl\")","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2866,"byte_end":2896,"line_start":81,"line_end":81,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2945,"byte_end":2953,"line_start":85,"line_end":85,"column_start":12,"column_end":20},"name":"MultiMap","qualname":"::MultiMap","value":"MultiMap {  }","parent":null,"children":[{"krate":0,"index":245}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3269,"byte_end":3272,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiMap<K, V>>::new","value":"fn () -> MultiMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty MultiMap","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3609,"byte_end":3622,"line_start":114,"line_end":114,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<MultiMap<K, V>>::with_capacity","value":"fn (capacity: usize) -> MultiMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty multimap with the given initial capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4155,"byte_end":4161,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"insert","qualname":"<MultiMap<K, V>>::insert","value":"fn (&mut self, k: K, v: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the multimap. If the key does exists in\n the map then the key is pushed to that key's vector. If the key doesn't\n exists in the map a new vector with the given value is inserted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4955,"byte_end":4967,"line_start":156,"line_end":156,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<MultiMap<K, V>>::contains_key","value":"fn <Q> (&self, k: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":5413,"byte_end":5416,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"len","qualname":"<MultiMap<K, V>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6069,"byte_end":6075,"line_start":196,"line_end":196,"column_start":12,"column_end":18},"name":"remove","qualname":"<MultiMap<K, V>>::remove","value":"fn <Q> (&mut self, k: &Q) -> Option<Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the vector of values at\n the key if the key was previously in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6738,"byte_end":6741,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"get","qualname":"<MultiMap<K, V>>::get","value":"fn <Q> (&self, k: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first item in the vector corresponding to\n the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7482,"byte_end":7489,"line_start":245,"line_end":245,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiMap<K, V>>::get_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the first item in the vector corresponding to\n the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8177,"byte_end":8184,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"get_vec","qualname":"<MultiMap<K, V>>::get_vec","value":"fn <Q> (&self, k: &Q) -> Option<&Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the vector corresponding to the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8957,"byte_end":8968,"line_start":293,"line_end":293,"column_start":12,"column_end":23},"name":"get_vec_mut","qualname":"<MultiMap<K, V>>::get_vec_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<&mut Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the vector corresponding to the key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9421,"byte_end":9429,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"capacity","qualname":"<MultiMap<K, V>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9797,"byte_end":9805,"line_start":326,"line_end":326,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<MultiMap<K, V>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10206,"byte_end":10211,"line_start":343,"line_end":343,"column_start":12,"column_end":17},"name":"clear","qualname":"<MultiMap<K, V>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs.\n Keeps the allocated memory for reuse.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10695,"byte_end":10699,"line_start":364,"line_end":364,"column_start":12,"column_end":16},"name":"keys","qualname":"<MultiMap<K, V>>::keys","value":"fn <'a> (&'a self) -> Keys<'a, K, Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n Iterator element type is &'a K.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":11398,"byte_end":11402,"line_start":387,"line_end":387,"column_start":12,"column_end":16},"name":"iter","qualname":"<MultiMap<K, V>>::iter","value":"fn (&self) -> Iter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order. The iterator returns\n a reference to the key and the first element in the corresponding key's vector.\n Iterator element type is (&'a K, &'a V).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":12223,"byte_end":12231,"line_start":414,"line_end":414,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<MultiMap<K, V>>::iter_mut","value":"fn (&mut self) -> IterMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order. The iterator returns\n a reference to the key and a mutable reference to the first element in the\n corresponding key's vector. Iterator element type is (&'a K, &'a mut V).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":12932,"byte_end":12940,"line_start":437,"line_end":437,"column_start":12,"column_end":20},"name":"iter_all","qualname":"<MultiMap<K, V>>::iter_all","value":"fn (&self) -> IterAll<K, Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order. The iterator returns\n a reference to the key and the corresponding key's vector.\n Iterator element type is (&'a K, &'a V).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13781,"byte_end":13793,"line_start":466,"line_end":466,"column_start":12,"column_end":24},"name":"iter_all_mut","qualname":"<MultiMap<K, V>>::iter_all_mut","value":"fn (&mut self) -> IterAllMut<K, Vec<V>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order. The iterator returns\n a reference to the key and the corresponding key's vector.\n Iterator element type is (&'a K, &'a V).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14740,"byte_end":14745,"line_start":498,"line_end":498,"column_start":12,"column_end":17},"name":"entry","qualname":"<MultiMap<K, V>>::entry","value":"fn (&mut self, k: K) -> Entry<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets the specified key's corresponding entry in the map for in-place manipulation.\n It's possible to both manipulate the vector and the 'value' (the first value in the\n vector).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":280},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18718,"byte_end":18722,"line_start":652,"line_end":652,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":257}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":258},"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19210,"byte_end":19217,"line_start":674,"line_end":674,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":225}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":32136,"byte_end":32149,"line_start":33,"line_end":33,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":33791,"byte_end":33802,"line_start":82,"line_end":82,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":34303,"byte_end":34308,"line_start":97,"line_end":97,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,115,101,114,100,101,46,114,115],"byte_start":35935,"byte_end":35943,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,115,101,114,100,101,46,114,115],"byte_start":36186,"byte_end":36201,"line_start":34,"line_end":34,"column_start":12,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,115,101,114,100,101,46,114,115],"byte_start":36452,"byte_end":36467,"line_start":48,"line_end":48,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,115,101,114,100,101,46,114,115],"byte_start":37109,"byte_end":37117,"line_start":71,"line_end":71,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3011,"byte_end":3019,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15132,"byte_end":15140,"line_start":507,"line_end":507,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15430,"byte_end":15438,"line_start":521,"line_end":521,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15656,"byte_end":15664,"line_start":530,"line_end":530,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15982,"byte_end":15990,"line_start":543,"line_end":543,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16071,"byte_end":16079,"line_start":549,"line_end":549,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16248,"byte_end":16256,"line_start":557,"line_end":557,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17184,"byte_end":17192,"line_start":595,"line_end":595,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17424,"byte_end":17432,"line_start":606,"line_end":606,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17663,"byte_end":17671,"line_start":616,"line_end":616,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17932,"byte_end":17940,"line_start":625,"line_end":625,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18438,"byte_end":18446,"line_start":642,"line_end":642,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18813,"byte_end":18817,"line_start":656,"line_end":656,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19113,"byte_end":19117,"line_start":668,"line_end":668,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19311,"byte_end":19318,"line_start":678,"line_end":678,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19626,"byte_end":19633,"line_start":690,"line_end":690,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2906,"byte_end":2911,"line_start":82,"line_end":82,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":90}}],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":32136,"byte_end":32149,"line_start":33,"line_end":33,"column_start":24,"column_end":37},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":52},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":33791,"byte_end":33802,"line_start":82,"line_end":82,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":54},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,101,110,116,114,121,46,114,115],"byte_start":34303,"byte_end":34308,"line_start":97,"line_end":97,"column_start":24,"column_end":29},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":56},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,115,101,114,100,101,46,114,115],"byte_start":35935,"byte_end":35943,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":274},"to":{"krate":10,"index":1774}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,115,101,114,100,101,46,114,115],"byte_start":36186,"byte_end":36201,"line_start":34,"line_end":34,"column_start":12,"column_end":27},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,115,101,114,100,101,46,114,115],"byte_start":36452,"byte_end":36467,"line_start":48,"line_end":48,"column_start":32,"column_end":47},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":126},"to":{"krate":10,"index":1348}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,115,101,114,100,101,46,114,115],"byte_start":37109,"byte_end":37117,"line_start":71,"line_end":71,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":274},"to":{"krate":10,"index":1262}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3011,"byte_end":3019,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15132,"byte_end":15140,"line_start":507,"line_end":507,"column_start":44,"column_end":52},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":2018}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15430,"byte_end":15438,"line_start":521,"line_end":521,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":8084}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15656,"byte_end":15664,"line_start":530,"line_end":530,"column_start":26,"column_end":34},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":2372}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15982,"byte_end":15990,"line_start":543,"line_end":543,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":2378}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16071,"byte_end":16079,"line_start":549,"line_end":549,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":2594}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16248,"byte_end":16256,"line_start":557,"line_end":557,"column_start":37,"column_end":45},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":4286}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17184,"byte_end":17192,"line_start":595,"line_end":595,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":4290}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17424,"byte_end":17432,"line_start":606,"line_end":606,"column_start":31,"column_end":39},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":4306}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17663,"byte_end":17671,"line_start":616,"line_end":616,"column_start":43,"column_end":51},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":4306}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17932,"byte_end":17940,"line_start":625,"line_end":625,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":4306}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18438,"byte_end":18446,"line_start":642,"line_end":642,"column_start":48,"column_end":56},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":4306}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18813,"byte_end":18817,"line_start":656,"line_end":656,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":280},"to":{"krate":2,"index":3902}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19113,"byte_end":19117,"line_start":668,"line_end":668,"column_start":38,"column_end":42},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":280},"to":{"krate":2,"index":4328}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19311,"byte_end":19318,"line_start":678,"line_end":678,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":258},"to":{"krate":2,"index":3902}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,65,108,97,110,32,77,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,109,117,108,116,105,109,97,112,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19626,"byte_end":19633,"line_start":690,"line_end":690,"column_start":38,"column_end":45},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":258},"to":{"krate":2,"index":4328}}]}